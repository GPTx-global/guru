syntax = "proto3";
package guru.cex.v1;

import "guru/cex/v1/cex.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";


option go_package = "github.com/GPTx-global/guru/x/cex/types";


// Msg defines the cex module Msg service.
service Msg {
  // Swap defines a method for swapping between two coins.

  rpc Swap(MsgSwap) returns (MsgSwapResponse);
  rpc RegisterAdmin(MsgRegisterAdmin) returns (MsgRegisterAdminResponse);
  rpc RemoveAdmin(MsgRemoveAdmin) returns (MsgRemoveAdminResponse);
  rpc RegisterExchange(MsgRegisterExchange) returns (MsgRegisterExchangeResponse);
  rpc UpdateExchange(MsgUpdateExchange) returns (MsgUpdateExchangeResponse);
  rpc ChangeModerator(MsgChangeModerator) returns (MsgChangeModeratorResponse);
  rpc UpdateRatemeter(MsgUpdateRatemeter) returns (MsgUpdateRatemeterResponse);
}

// msg declaration for swapping coins.
message MsgSwap {
  option (cosmos.msg.v1.signer) = "from_address";
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string   exchange_id               = 2 [
    (cosmos_proto.scalar) = "cosmos.Int", 
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
    (gogoproto.nullable) = false
  ];
  string   from_denom                = 3;
  string   to_denom                  = 4;
  cosmos.base.v1beta1.Coin amount    = 5
      [(gogoproto.nullable) = false, 
       (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
}

// Response type for Msg/Swap.
message MsgSwapResponse {
}

// msg declaration for registering admin.
message MsgRemoveAdmin {
  option (cosmos.msg.v1.signer) = "moderator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   moderator_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // admin address to remove
  string admin_address = 2;
}

// Response type for the Msg/RegisterAdmin.
message MsgRemoveAdminResponse {
}

// msg declaration for registering admin.
message MsgRegisterAdmin {
  option (cosmos.msg.v1.signer) = "moderator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   moderator_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // new admin address
  string admin_address = 2;
  string exchange_id = 3 [
    (cosmos_proto.scalar) = "cosmos.Int", 
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
    (gogoproto.nullable) = false
  ];
}

// Response type for the Msg/RegisterAdmin.
message MsgRegisterAdminResponse {
}

// msg declaration for registering admin.
message MsgRegisterExchange {
  option (cosmos.msg.v1.signer) = "admin_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   admin_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // exchange
  Exchange exchange = 3;
}

// Response type for the Msg/RegisterAdmin.
message MsgRegisterExchangeResponse {
}

// msg declaration for updating the rate.
message MsgUpdateExchange {
  option (cosmos.msg.v1.signer) = "admin_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   admin_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // ID for the existing coin pair
  string id     = 2 [
    (cosmos_proto.scalar) = "cosmos.Int", 
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
    (gogoproto.nullable) = false
  ];
  string key    = 3;
  string value  = 4;
}

// Response type for the Msg/UpdateRate.
message MsgUpdateExchangeResponse {
}

// msg declaration for changing the moderator.
message MsgChangeModerator {
  option (cosmos.msg.v1.signer) = "moderator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   moderator_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   new_moderator_address     = 2 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Response type for the Msg/ChangeModerator.
message MsgChangeModeratorResponse {
}

// msg declaration for updating the rate.
message MsgUpdateRatemeter {
  option (cosmos.msg.v1.signer) = "moderator_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   moderator_address                 = 1 
      [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // ratemeter
  Ratemeter ratemeter = 2;
}

// Response type for the Msg/UpdateRate.
message MsgUpdateRatemeterResponse {
}