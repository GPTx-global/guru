syntax = "proto3";
package guru.cex.v1;

import "guru/cex/v1/cex.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/GPTx-global/guru/x/cex/types";


// Query provides defines the gRPC querier service.
service Query {
 
  // ModeratorAddress returns the current moderator address
  rpc ModeratorAddress(QueryModeratorAddressRequest) 
        returns (QueryModeratorAddressResponse) {
    option (google.api.http).get = "/guru/cex/v1/moderator_address";
  }

  rpc Attributes(QueryAttributesRequest) returns (QueryAttributesResponse) {
    option (google.api.http).get = "/guru/cex/v1/coin_pair/{id}/{key}";
  }

  rpc Exchanges(QueryExchangesRequest) returns (QueryExchangesResponse) {
    option (google.api.http).get = "/guru/cex/v1/list";
  }

  rpc Admins(QueryAdminsRequest) returns (QueryAdminsResponse) {
    option (google.api.http).get = "/guru/cex/v1/list";
  }

  rpc NextExchangeId(QueryNextExchangeIdRequest) returns (QueryNextExchangeIdResponse) {
    option (google.api.http).get = "/guru/cex/v1/next_exchange_id";
  }

}

// Request type for the Query/ModeratorAddress RPC method.
message QueryModeratorAddressRequest {
}

// Response type for the Query/ModeratorAddress RPC method.
message QueryModeratorAddressResponse {
  string moderator_address = 1;
}

// Request type for the Query/Coin RPC method.
message QueryAttributesRequest {
  string id  = 1;
  string key = 2;
}

// Response type for the Query/Coin RPC method.
message QueryAttributesResponse {
  repeated Attribute attributes = 1 [
    (gogoproto.nullable)   = false
  ];
}

// Request type for the Query/CoinPair RPC method.
message QueryExchangesRequest {
}

// Response type for the Query/CoinPair RPC method.
message QueryExchangesResponse {
  repeated Exchange exchanges = 1 [
    (gogoproto.nullable)   = false
  ];
}

// Request type for the Query/CoinPair RPC method.
message QueryAdminsRequest {
}

// Response type for the Query/CoinPair RPC method.
message QueryAdminsResponse {
  repeated Admin admins = 1 [
    (gogoproto.nullable)   = false
  ];
}

// Request type for the Query/CoinPair RPC method.
message QueryNextExchangeIdRequest {
}

// Response type for the Query/CoinPair RPC method.
message QueryNextExchangeIdResponse {
  string id = 1 [
    (cosmos_proto.scalar) = "cosmos.Int", 
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
    (gogoproto.nullable) = false
  ];
}