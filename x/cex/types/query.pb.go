// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/cex/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressRequest struct {
}

func (m *QueryModeratorAddressRequest) Reset()         { *m = QueryModeratorAddressRequest{} }
func (m *QueryModeratorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressRequest) ProtoMessage()    {}
func (*QueryModeratorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{0}
}
func (m *QueryModeratorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressRequest.Merge(m, src)
}
func (m *QueryModeratorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressRequest proto.InternalMessageInfo

// Response type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressResponse struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *QueryModeratorAddressResponse) Reset()         { *m = QueryModeratorAddressResponse{} }
func (m *QueryModeratorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressResponse) ProtoMessage()    {}
func (*QueryModeratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{1}
}
func (m *QueryModeratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressResponse.Merge(m, src)
}
func (m *QueryModeratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressResponse proto.InternalMessageInfo

func (m *QueryModeratorAddressResponse) GetModeratorAddress() string {
	if m != nil {
		return m.ModeratorAddress
	}
	return ""
}

// Request type for the Query/ReserveAccount RPC method.
type QueryReserveAccountRequest struct {
}

func (m *QueryReserveAccountRequest) Reset()         { *m = QueryReserveAccountRequest{} }
func (m *QueryReserveAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveAccountRequest) ProtoMessage()    {}
func (*QueryReserveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{2}
}
func (m *QueryReserveAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveAccountRequest.Merge(m, src)
}
func (m *QueryReserveAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveAccountRequest proto.InternalMessageInfo

// Response type for the Query/ReserveAccount RPC method.
type QueryReserveAccountResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryReserveAccountResponse) Reset()         { *m = QueryReserveAccountResponse{} }
func (m *QueryReserveAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReserveAccountResponse) ProtoMessage()    {}
func (*QueryReserveAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{3}
}
func (m *QueryReserveAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveAccountResponse.Merge(m, src)
}
func (m *QueryReserveAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveAccountResponse proto.InternalMessageInfo

func (m *QueryReserveAccountResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Request type for the Query/Reserve RPC method.
type QueryReserveRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryReserveRequest) Reset()         { *m = QueryReserveRequest{} }
func (m *QueryReserveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveRequest) ProtoMessage()    {}
func (*QueryReserveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{4}
}
func (m *QueryReserveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveRequest.Merge(m, src)
}
func (m *QueryReserveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveRequest proto.InternalMessageInfo

func (m *QueryReserveRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Response type for the Query/Reserve RPC method.
type QueryReserveResponse struct {
	Reserve types.Coin `protobuf:"bytes,1,opt,name=reserve,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"reserve"`
}

func (m *QueryReserveResponse) Reset()         { *m = QueryReserveResponse{} }
func (m *QueryReserveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReserveResponse) ProtoMessage()    {}
func (*QueryReserveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{5}
}
func (m *QueryReserveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveResponse.Merge(m, src)
}
func (m *QueryReserveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveResponse proto.InternalMessageInfo

func (m *QueryReserveResponse) GetReserve() types.Coin {
	if m != nil {
		return m.Reserve
	}
	return types.Coin{}
}

// Request type for the Query/Rate RPC method.
type QueryRateRequest struct {
	PairDenom string `protobuf:"bytes,1,opt,name=pair_denom,json=pairDenom,proto3" json:"pair_denom,omitempty"`
}

func (m *QueryRateRequest) Reset()         { *m = QueryRateRequest{} }
func (m *QueryRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateRequest) ProtoMessage()    {}
func (*QueryRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{6}
}
func (m *QueryRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateRequest.Merge(m, src)
}
func (m *QueryRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateRequest proto.InternalMessageInfo

func (m *QueryRateRequest) GetPairDenom() string {
	if m != nil {
		return m.PairDenom
	}
	return ""
}

// Response type for the Query/Rate RPC method.
type QueryRateResponse struct {
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
}

func (m *QueryRateResponse) Reset()         { *m = QueryRateResponse{} }
func (m *QueryRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateResponse) ProtoMessage()    {}
func (*QueryRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{7}
}
func (m *QueryRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateResponse.Merge(m, src)
}
func (m *QueryRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateResponse proto.InternalMessageInfo

// Request type for the Query/Admin RPC method.
type QueryAdminRequest struct {
	PairDenom string `protobuf:"bytes,1,opt,name=pair_denom,json=pairDenom,proto3" json:"pair_denom,omitempty"`
}

func (m *QueryAdminRequest) Reset()         { *m = QueryAdminRequest{} }
func (m *QueryAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAdminRequest) ProtoMessage()    {}
func (*QueryAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{8}
}
func (m *QueryAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminRequest.Merge(m, src)
}
func (m *QueryAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminRequest proto.InternalMessageInfo

func (m *QueryAdminRequest) GetPairDenom() string {
	if m != nil {
		return m.PairDenom
	}
	return ""
}

// Response type for the Query/Admin RPC method.
type QueryAdminResponse struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *QueryAdminResponse) Reset()         { *m = QueryAdminResponse{} }
func (m *QueryAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAdminResponse) ProtoMessage()    {}
func (*QueryAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03253bdc2f527e22, []int{9}
}
func (m *QueryAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAdminResponse.Merge(m, src)
}
func (m *QueryAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAdminResponse proto.InternalMessageInfo

func (m *QueryAdminResponse) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryModeratorAddressRequest)(nil), "guru.cex.v1.QueryModeratorAddressRequest")
	proto.RegisterType((*QueryModeratorAddressResponse)(nil), "guru.cex.v1.QueryModeratorAddressResponse")
	proto.RegisterType((*QueryReserveAccountRequest)(nil), "guru.cex.v1.QueryReserveAccountRequest")
	proto.RegisterType((*QueryReserveAccountResponse)(nil), "guru.cex.v1.QueryReserveAccountResponse")
	proto.RegisterType((*QueryReserveRequest)(nil), "guru.cex.v1.QueryReserveRequest")
	proto.RegisterType((*QueryReserveResponse)(nil), "guru.cex.v1.QueryReserveResponse")
	proto.RegisterType((*QueryRateRequest)(nil), "guru.cex.v1.QueryRateRequest")
	proto.RegisterType((*QueryRateResponse)(nil), "guru.cex.v1.QueryRateResponse")
	proto.RegisterType((*QueryAdminRequest)(nil), "guru.cex.v1.QueryAdminRequest")
	proto.RegisterType((*QueryAdminResponse)(nil), "guru.cex.v1.QueryAdminResponse")
}

func init() { proto.RegisterFile("guru/cex/v1/query.proto", fileDescriptor_03253bdc2f527e22) }

var fileDescriptor_03253bdc2f527e22 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6f, 0x12, 0x4f,
	0x14, 0x66, 0x7f, 0x69, 0x7f, 0x0d, 0xaf, 0x6a, 0xe8, 0x88, 0xb1, 0x5d, 0x61, 0xa1, 0xab, 0x29,
	0xd5, 0x86, 0x9d, 0x80, 0x07, 0x63, 0xe2, 0x05, 0x24, 0xf1, 0xa2, 0x49, 0x25, 0x9e, 0xbc, 0x90,
	0x61, 0x77, 0xb2, 0x6e, 0x64, 0x77, 0x60, 0x77, 0x96, 0xd0, 0xd4, 0x5e, 0xbc, 0x79, 0xd3, 0xf8,
	0x5f, 0x78, 0xf6, 0x8f, 0xe8, 0xb1, 0xd1, 0x8b, 0xf1, 0x50, 0x0d, 0xf8, 0x7f, 0x68, 0x76, 0x76,
	0xb0, 0xbb, 0x14, 0x90, 0x13, 0xcc, 0xfb, 0xde, 0xfb, 0xbe, 0x8f, 0x99, 0xef, 0x01, 0x37, 0xed,
	0xd0, 0x0f, 0xb1, 0x49, 0x47, 0x78, 0x58, 0xc3, 0x83, 0x90, 0xfa, 0x47, 0x46, 0xdf, 0x67, 0x9c,
	0xa1, 0xcd, 0x08, 0x30, 0x4c, 0x3a, 0x32, 0x86, 0x35, 0xf5, 0x46, 0xb2, 0x2b, 0xaa, 0x89, 0x1e,
	0x55, 0x33, 0x59, 0xe0, 0xb2, 0x00, 0x77, 0x49, 0x40, 0xf1, 0xb0, 0xd6, 0xa5, 0x9c, 0xd4, 0xb0,
	0xc9, 0x1c, 0x4f, 0xe2, 0x3b, 0x31, 0xde, 0x11, 0x27, 0x1c, 0x1f, 0x24, 0x94, 0xb7, 0x99, 0xcd,
	0xe2, 0x7a, 0xf4, 0x4d, 0x56, 0x0b, 0x36, 0x63, 0x76, 0x8f, 0x62, 0xd2, 0x77, 0x30, 0xf1, 0x3c,
	0xc6, 0x09, 0x77, 0x98, 0x27, 0x67, 0x74, 0x0d, 0x0a, 0xcf, 0x23, 0x87, 0xcf, 0x98, 0x45, 0x7d,
	0xc2, 0x99, 0xdf, 0xb0, 0x2c, 0x9f, 0x06, 0x41, 0x9b, 0x0e, 0x42, 0x1a, 0x70, 0xfd, 0x29, 0x14,
	0x17, 0xe0, 0x41, 0x9f, 0x79, 0x01, 0x45, 0x07, 0xb0, 0xe5, 0x4e, 0xb1, 0x0e, 0x89, 0xc1, 0x6d,
	0xa5, 0xac, 0xec, 0x67, 0xdb, 0x39, 0x77, 0x66, 0x48, 0x2f, 0x80, 0x2a, 0xd8, 0xda, 0x34, 0xa0,
	0xfe, 0x90, 0x36, 0x4c, 0x93, 0x85, 0x1e, 0x9f, 0x6a, 0x3d, 0x80, 0x5b, 0x73, 0x51, 0xa9, 0xb4,
	0x0d, 0x1b, 0x69, 0xfe, 0xe9, 0x51, 0x3f, 0x80, 0xeb, 0xc9, 0x41, 0xc9, 0x87, 0xf2, 0xb0, 0x6e,
	0x51, 0x8f, 0xb9, 0xb2, 0x3d, 0x3e, 0xe8, 0x6f, 0x20, 0x9f, 0x6e, 0x96, 0xf4, 0x16, 0x6c, 0xf8,
	0x71, 0x49, 0xf4, 0x6f, 0xd6, 0x77, 0x0c, 0x79, 0xbb, 0xd1, 0x53, 0x18, 0xf2, 0x29, 0x8c, 0xc7,
	0xcc, 0xf1, 0x9a, 0xf8, 0xf4, 0xbc, 0x94, 0xf9, 0xf4, 0xa3, 0x54, 0xb1, 0x1d, 0xfe, 0x2a, 0xec,
	0x1a, 0x26, 0x73, 0xe5, 0x53, 0xc8, 0x8f, 0x6a, 0x60, 0xbd, 0xc6, 0xfc, 0xa8, 0x4f, 0x03, 0x31,
	0xd0, 0x9e, 0x52, 0xeb, 0x35, 0xc8, 0xc5, 0xea, 0x84, 0xff, 0xf5, 0x59, 0x04, 0xe8, 0x13, 0xc7,
	0xef, 0x24, 0xcd, 0x66, 0xa3, 0x4a, 0x4b, 0x18, 0xa6, 0xb0, 0x95, 0x18, 0x91, 0x6e, 0x0f, 0x61,
	0xcd, 0x27, 0x3c, 0xb6, 0x9a, 0x6d, 0x3e, 0x8a, 0xfc, 0x7c, 0x3f, 0x2f, 0xed, 0xad, 0xe0, 0xa7,
	0x45, 0xcd, 0x2f, 0x9f, 0xab, 0x20, 0x7f, 0x5b, 0x8b, 0x9a, 0x6d, 0xc1, 0xa4, 0xd7, 0xa5, 0x4c,
	0xc3, 0x72, 0x1d, 0x6f, 0x45, 0x6b, 0x0f, 0x01, 0x25, 0x67, 0xa4, 0xb7, 0xdb, 0x70, 0x95, 0x44,
	0x85, 0x99, 0x38, 0x5c, 0x11, 0x45, 0x19, 0x85, 0xfa, 0xef, 0x35, 0x58, 0x17, 0xb3, 0xe8, 0x83,
	0x02, 0xb9, 0xd9, 0x78, 0xa1, 0xbb, 0x46, 0x62, 0x57, 0x8c, 0x65, 0x11, 0x55, 0xef, 0xad, 0xd2,
	0x1a, 0x5b, 0xd3, 0xf7, 0xde, 0x7e, 0xfd, 0xf5, 0xf1, 0xbf, 0x32, 0xd2, 0x70, 0x72, 0xfb, 0x2e,
	0x05, 0x18, 0xbd, 0x53, 0xe0, 0x5a, 0x3a, 0x86, 0xa8, 0x72, 0x59, 0x66, 0x6e, 0x8c, 0xd5, 0xfd,
	0x7f, 0x37, 0x4a, 0x37, 0x77, 0x84, 0x1b, 0x0d, 0x15, 0x52, 0x6e, 0x64, 0x54, 0x3a, 0x44, 0x0a,
	0x73, 0xd8, 0x90, 0xf3, 0xa8, 0xbc, 0x90, 0x7a, 0x2a, 0xbe, 0xbb, 0xa4, 0x63, 0x15, 0x55, 0x7c,
	0x2c, 0x9e, 0xfa, 0x04, 0xb9, 0xb0, 0x16, 0x05, 0x0e, 0x15, 0xe7, 0x10, 0x5e, 0x64, 0x57, 0xd5,
	0x16, 0xc1, 0x4b, 0x2f, 0x3c, 0x0a, 0x1c, 0x3e, 0xbe, 0x48, 0xd6, 0x09, 0x1a, 0xc0, 0xba, 0x08,
	0x11, 0x9a, 0x43, 0x98, 0x4c, 0xa4, 0x5a, 0x5a, 0x88, 0x4b, 0xc5, 0x8a, 0x50, 0xdc, 0x45, 0xa5,
	0x94, 0xa2, 0xc8, 0x5e, 0x4a, 0xb2, 0xd9, 0x38, 0x1d, 0x6b, 0xca, 0xd9, 0x58, 0x53, 0x7e, 0x8e,
	0x35, 0xe5, 0xfd, 0x44, 0xcb, 0x9c, 0x4d, 0xb4, 0xcc, 0xb7, 0x89, 0x96, 0x79, 0x99, 0x5c, 0xeb,
	0x27, 0x87, 0x2f, 0x46, 0x55, 0xbb, 0xc7, 0xba, 0xa4, 0x17, 0x13, 0x8e, 0x04, 0xa5, 0xd8, 0xa5,
	0xee, 0xff, 0xe2, 0x4f, 0xf4, 0xfe, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x04, 0xab, 0xa7,
	0xf2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
	// ReserveAccount returns the current reserve address
	ReserveAccount(ctx context.Context, in *QueryReserveAccountRequest, opts ...grpc.CallOption) (*QueryReserveAccountResponse, error)
	// Reserve returns the current reserve amount
	Reserve(ctx context.Context, in *QueryReserveRequest, opts ...grpc.CallOption) (*QueryReserveResponse, error)
	// Rate returns current rate for the coin pair.
	Rate(ctx context.Context, in *QueryRateRequest, opts ...grpc.CallOption) (*QueryRateResponse, error)
	// CoinPair returns current admin for the coin pair.
	Admin(ctx context.Context, in *QueryAdminRequest, opts ...grpc.CallOption) (*QueryAdminResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Query/ModeratorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveAccount(ctx context.Context, in *QueryReserveAccountRequest, opts ...grpc.CallOption) (*QueryReserveAccountResponse, error) {
	out := new(QueryReserveAccountResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Query/ReserveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reserve(ctx context.Context, in *QueryReserveRequest, opts ...grpc.CallOption) (*QueryReserveResponse, error) {
	out := new(QueryReserveResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Query/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rate(ctx context.Context, in *QueryRateRequest, opts ...grpc.CallOption) (*QueryRateResponse, error) {
	out := new(QueryRateResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Query/Rate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Admin(ctx context.Context, in *QueryAdminRequest, opts ...grpc.CallOption) (*QueryAdminResponse, error) {
	out := new(QueryAdminResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Query/Admin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	// ReserveAccount returns the current reserve address
	ReserveAccount(context.Context, *QueryReserveAccountRequest) (*QueryReserveAccountResponse, error)
	// Reserve returns the current reserve amount
	Reserve(context.Context, *QueryReserveRequest) (*QueryReserveResponse, error)
	// Rate returns current rate for the coin pair.
	Rate(context.Context, *QueryRateRequest) (*QueryRateResponse, error)
	// CoinPair returns current admin for the coin pair.
	Admin(context.Context, *QueryAdminRequest) (*QueryAdminResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ModeratorAddress(ctx context.Context, req *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (*UnimplementedQueryServer) ReserveAccount(ctx context.Context, req *QueryReserveAccountRequest) (*QueryReserveAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveAccount not implemented")
}
func (*UnimplementedQueryServer) Reserve(ctx context.Context, req *QueryReserveRequest) (*QueryReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (*UnimplementedQueryServer) Rate(ctx context.Context, req *QueryRateRequest) (*QueryRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rate not implemented")
}
func (*UnimplementedQueryServer) Admin(ctx context.Context, req *QueryAdminRequest) (*QueryAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admin not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Query/ModeratorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Query/ReserveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveAccount(ctx, req.(*QueryReserveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Query/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reserve(ctx, req.(*QueryReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Query/Rate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rate(ctx, req.(*QueryRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Admin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Admin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Query/Admin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Admin(ctx, req.(*QueryAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.cex.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
		{
			MethodName: "ReserveAccount",
			Handler:    _Query_ReserveAccount_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _Query_Reserve_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _Query_Rate_Handler,
		},
		{
			MethodName: "Admin",
			Handler:    _Query_Admin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/cex/v1/query.proto",
}

func (m *QueryModeratorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModeratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryReserveAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairDenom) > 0 {
		i -= len(m.PairDenom)
		copy(dAtA[i:], m.PairDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairDenom) > 0 {
		i -= len(m.PairDenom)
		copy(dAtA[i:], m.PairDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryModeratorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModeratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReserveAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryReserveAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReserveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReserveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reserve.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryModeratorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModeratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
