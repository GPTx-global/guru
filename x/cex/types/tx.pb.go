// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/cex/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// msg declaration for swapping coins.
type MsgSwap struct {
	FromAddress string     `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	FromDenom   string     `protobuf:"bytes,2,opt,name=from_denom,json=fromDenom,proto3" json:"from_denom,omitempty"`
	FromChannel string     `protobuf:"bytes,3,opt,name=from_channel,json=fromChannel,proto3" json:"from_channel,omitempty"`
	ToDenom     string     `protobuf:"bytes,4,opt,name=to_denom,json=toDenom,proto3" json:"to_denom,omitempty"`
	ToChannel   string     `protobuf:"bytes,5,opt,name=to_channel,json=toChannel,proto3" json:"to_channel,omitempty"`
	Amount      types.Coin `protobuf:"bytes,6,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{0}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

// Response type for Msg/Swap.
type MsgSwapResponse struct {
}

func (m *MsgSwapResponse) Reset()         { *m = MsgSwapResponse{} }
func (m *MsgSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapResponse) ProtoMessage()    {}
func (*MsgSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{1}
}
func (m *MsgSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapResponse.Merge(m, src)
}
func (m *MsgSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapResponse proto.InternalMessageInfo

// msg declaration for registering the reserve address.
type MsgRegisterReserveAccount struct {
	ModeratorAddress  string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	NewReserveAddress string `protobuf:"bytes,2,opt,name=new_reserve_address,json=newReserveAddress,proto3" json:"new_reserve_address,omitempty"`
}

func (m *MsgRegisterReserveAccount) Reset()         { *m = MsgRegisterReserveAccount{} }
func (m *MsgRegisterReserveAccount) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAccount) ProtoMessage()    {}
func (*MsgRegisterReserveAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{2}
}
func (m *MsgRegisterReserveAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAccount.Merge(m, src)
}
func (m *MsgRegisterReserveAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAccount proto.InternalMessageInfo

// Response type for the Msg/ChangeReserveAddress.
type MsgRegisterReserveAccountResponse struct {
}

func (m *MsgRegisterReserveAccountResponse) Reset()         { *m = MsgRegisterReserveAccountResponse{} }
func (m *MsgRegisterReserveAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterReserveAccountResponse) ProtoMessage()    {}
func (*MsgRegisterReserveAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{3}
}
func (m *MsgRegisterReserveAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterReserveAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterReserveAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterReserveAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterReserveAccountResponse.Merge(m, src)
}
func (m *MsgRegisterReserveAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterReserveAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterReserveAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterReserveAccountResponse proto.InternalMessageInfo

// msg declaration for registering admin.
type MsgRegisterAdmin struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	NewAdminAddress  string `protobuf:"bytes,2,opt,name=new_admin_address,json=newAdminAddress,proto3" json:"new_admin_address,omitempty"`
	PairDenom        string `protobuf:"bytes,3,opt,name=pair_denom,json=pairDenom,proto3" json:"pair_denom,omitempty"`
}

func (m *MsgRegisterAdmin) Reset()         { *m = MsgRegisterAdmin{} }
func (m *MsgRegisterAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdmin) ProtoMessage()    {}
func (*MsgRegisterAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{4}
}
func (m *MsgRegisterAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdmin.Merge(m, src)
}
func (m *MsgRegisterAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdmin proto.InternalMessageInfo

// Response type for the Msg/RegisterAdmin.
type MsgRegisterAdminResponse struct {
}

func (m *MsgRegisterAdminResponse) Reset()         { *m = MsgRegisterAdminResponse{} }
func (m *MsgRegisterAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdminResponse) ProtoMessage()    {}
func (*MsgRegisterAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{5}
}
func (m *MsgRegisterAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdminResponse.Merge(m, src)
}
func (m *MsgRegisterAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdminResponse proto.InternalMessageInfo

// msg declaration for updating the rate.
type MsgUpdateRate struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	PairDenom    string `protobuf:"bytes,2,opt,name=pair_denom,json=pairDenom,proto3" json:"pair_denom,omitempty"`
	NewRate      string `protobuf:"bytes,3,opt,name=new_rate,json=newRate,proto3" json:"new_rate,omitempty"`
}

func (m *MsgUpdateRate) Reset()         { *m = MsgUpdateRate{} }
func (m *MsgUpdateRate) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRate) ProtoMessage()    {}
func (*MsgUpdateRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{6}
}
func (m *MsgUpdateRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRate.Merge(m, src)
}
func (m *MsgUpdateRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRate proto.InternalMessageInfo

// Response type for the Msg/UpdateRate.
type MsgUpdateRateResponse struct {
}

func (m *MsgUpdateRateResponse) Reset()         { *m = MsgUpdateRateResponse{} }
func (m *MsgUpdateRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRateResponse) ProtoMessage()    {}
func (*MsgUpdateRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{7}
}
func (m *MsgUpdateRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRateResponse.Merge(m, src)
}
func (m *MsgUpdateRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRateResponse proto.InternalMessageInfo

// msg declaration for changing the moderator.
type MsgChangeModerator struct {
	ModeratorAddress    string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	NewModeratorAddress string `protobuf:"bytes,2,opt,name=new_moderator_address,json=newModeratorAddress,proto3" json:"new_moderator_address,omitempty"`
}

func (m *MsgChangeModerator) Reset()         { *m = MsgChangeModerator{} }
func (m *MsgChangeModerator) String() string { return proto.CompactTextString(m) }
func (*MsgChangeModerator) ProtoMessage()    {}
func (*MsgChangeModerator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{8}
}
func (m *MsgChangeModerator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeModerator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeModerator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeModerator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeModerator.Merge(m, src)
}
func (m *MsgChangeModerator) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeModerator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeModerator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeModerator proto.InternalMessageInfo

// Response type for the Msg/ChangeModerator.
type MsgChangeModeratorResponse struct {
}

func (m *MsgChangeModeratorResponse) Reset()         { *m = MsgChangeModeratorResponse{} }
func (m *MsgChangeModeratorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeModeratorResponse) ProtoMessage()    {}
func (*MsgChangeModeratorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a121e5cb1bd60dc8, []int{9}
}
func (m *MsgChangeModeratorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeModeratorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeModeratorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeModeratorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeModeratorResponse.Merge(m, src)
}
func (m *MsgChangeModeratorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeModeratorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeModeratorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeModeratorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSwap)(nil), "guru.cex.v1.MsgSwap")
	proto.RegisterType((*MsgSwapResponse)(nil), "guru.cex.v1.MsgSwapResponse")
	proto.RegisterType((*MsgRegisterReserveAccount)(nil), "guru.cex.v1.MsgRegisterReserveAccount")
	proto.RegisterType((*MsgRegisterReserveAccountResponse)(nil), "guru.cex.v1.MsgRegisterReserveAccountResponse")
	proto.RegisterType((*MsgRegisterAdmin)(nil), "guru.cex.v1.MsgRegisterAdmin")
	proto.RegisterType((*MsgRegisterAdminResponse)(nil), "guru.cex.v1.MsgRegisterAdminResponse")
	proto.RegisterType((*MsgUpdateRate)(nil), "guru.cex.v1.MsgUpdateRate")
	proto.RegisterType((*MsgUpdateRateResponse)(nil), "guru.cex.v1.MsgUpdateRateResponse")
	proto.RegisterType((*MsgChangeModerator)(nil), "guru.cex.v1.MsgChangeModerator")
	proto.RegisterType((*MsgChangeModeratorResponse)(nil), "guru.cex.v1.MsgChangeModeratorResponse")
}

func init() { proto.RegisterFile("guru/cex/v1/tx.proto", fileDescriptor_a121e5cb1bd60dc8) }

var fileDescriptor_a121e5cb1bd60dc8 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x3d, 0x4f, 0x1b, 0x4b,
	0x14, 0xf5, 0x1a, 0x1e, 0x3c, 0x2e, 0x20, 0x60, 0x9f, 0x79, 0xd8, 0x2b, 0x58, 0x83, 0xa3, 0x04,
	0x14, 0x89, 0x5d, 0x99, 0x74, 0x8e, 0x52, 0x18, 0x88, 0x92, 0x02, 0x4b, 0x91, 0x09, 0x4d, 0x52,
	0x58, 0xe3, 0xf5, 0x64, 0x58, 0x85, 0xdd, 0xb1, 0x76, 0xc6, 0x1f, 0xb4, 0xa9, 0x52, 0xe6, 0x27,
	0x50, 0xa4, 0x4a, 0x95, 0x22, 0xf9, 0x01, 0xe9, 0x28, 0x52, 0x20, 0xaa, 0x54, 0x24, 0x82, 0x22,
	0xf9, 0x19, 0xd1, 0xcc, 0x8e, 0x37, 0xeb, 0x35, 0x8e, 0x29, 0xa8, 0x60, 0xef, 0xbd, 0xe7, 0xf8,
	0x9c, 0x3b, 0xf7, 0xce, 0x40, 0x86, 0xb4, 0x82, 0x96, 0xed, 0xe0, 0xae, 0xdd, 0x2e, 0xda, 0xbc,
	0x6b, 0x35, 0x03, 0xca, 0xa9, 0x3e, 0x2d, 0xa2, 0x96, 0x83, 0xbb, 0x56, 0xbb, 0x68, 0x98, 0x0e,
	0x65, 0x1e, 0x65, 0x76, 0x1d, 0x31, 0x6c, 0xb7, 0x8b, 0x75, 0xcc, 0x51, 0xd1, 0x76, 0xa8, 0xeb,
	0x87, 0xc5, 0xc6, 0x92, 0xca, 0x7b, 0x8c, 0x08, 0x12, 0x8f, 0x11, 0x95, 0xc8, 0x85, 0x89, 0x9a,
	0xfc, 0xb2, 0xc3, 0x0f, 0x95, 0xca, 0x10, 0x4a, 0x68, 0x18, 0x17, 0xff, 0x85, 0xd1, 0xc2, 0x97,
	0x34, 0x4c, 0x56, 0x18, 0xd9, 0xef, 0xa0, 0xa6, 0xfe, 0x10, 0x66, 0x5e, 0x05, 0xd4, 0xab, 0xa1,
	0x46, 0x23, 0xc0, 0x8c, 0x65, 0xb5, 0x55, 0x6d, 0x63, 0x6a, 0x3b, 0x7b, 0xfe, 0x69, 0x33, 0xa3,
	0x98, 0xca, 0x61, 0x66, 0x9f, 0x07, 0xae, 0x4f, 0xaa, 0xd3, 0xa2, 0x5a, 0x85, 0xf4, 0x15, 0x00,
	0x09, 0x6e, 0x60, 0x9f, 0x7a, 0xd9, 0xb4, 0x80, 0x56, 0xa7, 0x44, 0x64, 0x57, 0x04, 0xf4, 0x35,
	0xc5, 0xed, 0x1c, 0x22, 0xdf, 0xc7, 0x47, 0xd9, 0x31, 0x59, 0x20, 0x19, 0x76, 0xc2, 0x90, 0x9e,
	0x83, 0x7f, 0x39, 0x55, 0xf8, 0x71, 0x99, 0x9e, 0xe4, 0x34, 0x44, 0xaf, 0x00, 0x70, 0x1a, 0x61,
	0xff, 0x09, 0xc9, 0x39, 0xed, 0x21, 0xeb, 0x30, 0x81, 0x3c, 0xda, 0xf2, 0x79, 0x76, 0x62, 0x55,
	0xdb, 0x98, 0xde, 0xca, 0x59, 0x4a, 0xaf, 0xe8, 0x9f, 0xa5, 0xfa, 0x67, 0xed, 0x50, 0xd7, 0xdf,
	0xb6, 0x4f, 0x2f, 0xf2, 0xa9, 0x0f, 0xdf, 0xf3, 0xeb, 0xc4, 0xe5, 0x87, 0xad, 0xba, 0xe5, 0x50,
	0x4f, 0xb5, 0x49, 0xfd, 0xd9, 0x64, 0x8d, 0xd7, 0x36, 0x3f, 0x6e, 0x62, 0x26, 0x01, 0x55, 0xc5,
	0x5c, 0xca, 0xbd, 0x3d, 0xc9, 0xa7, 0x7e, 0x9d, 0xe4, 0x53, 0x6f, 0x7e, 0x7e, 0xbc, 0xdf, 0xd7,
	0xa7, 0xc2, 0x02, 0xcc, 0xa9, 0x16, 0x56, 0x31, 0x6b, 0x52, 0x9f, 0xe1, 0xc2, 0x57, 0x0d, 0x72,
	0x15, 0x46, 0xaa, 0x98, 0xb8, 0x8c, 0xe3, 0xa0, 0x8a, 0x19, 0x0e, 0xda, 0xb8, 0xec, 0x38, 0x82,
	0x4b, 0x7f, 0x0c, 0x0b, 0x1e, 0x6d, 0xe0, 0x00, 0x71, 0x1a, 0xdc, 0xb8, 0xdb, 0xf3, 0x11, 0xa4,
	0xd7, 0xf2, 0xa7, 0xf0, 0x9f, 0x8f, 0x3b, 0xb5, 0x20, 0x24, 0x8f, 0x88, 0xd2, 0x23, 0x88, 0x16,
	0x7c, 0xdc, 0xe9, 0x09, 0x0a, 0x13, 0x25, 0x33, 0x6e, 0x6e, 0x50, 0x5b, 0xe1, 0x0e, 0xac, 0x0d,
	0x75, 0x13, 0x79, 0xbe, 0xd0, 0x60, 0x3e, 0x56, 0x55, 0x6e, 0x78, 0xae, 0x7f, 0x5b, 0x56, 0x77,
	0x41, 0xa8, 0xae, 0x21, 0xc1, 0x79, 0x63, 0xa3, 0x73, 0x3e, 0xee, 0x48, 0x15, 0xb1, 0x19, 0x6d,
	0x22, 0x37, 0x50, 0x33, 0x16, 0x8e, 0xe0, 0x94, 0x88, 0xc8, 0x29, 0x1b, 0xd9, 0x05, 0x03, 0xb2,
	0x49, 0x7f, 0x91, 0xf9, 0xf7, 0x1a, 0xcc, 0x56, 0x18, 0x39, 0x68, 0x36, 0x10, 0xc7, 0x55, 0xc4,
	0xb1, 0xfe, 0x08, 0x66, 0xfb, 0xe5, 0x8e, 0x72, 0x3d, 0x83, 0x86, 0x6b, 0x4d, 0x27, 0xb4, 0x8a,
	0x65, 0x91, 0x67, 0x8f, 0x38, 0x56, 0x46, 0x26, 0xc5, 0xb1, 0x22, 0x8e, 0x4b, 0x46, 0xdc, 0x46,
	0xbf, 0x86, 0xc2, 0x12, 0x2c, 0xf6, 0xa9, 0x8c, 0xf4, 0x9f, 0x6b, 0xa0, 0x57, 0x18, 0x11, 0x1b,
	0x45, 0x70, 0xa5, 0x67, 0xfd, 0xb6, 0x8e, 0x6f, 0x0f, 0x16, 0x85, 0xda, 0x41, 0xaa, 0x51, 0x47,
	0x28, 0x06, 0xbc, 0x92, 0x60, 0x2b, 0xad, 0xc7, 0x0d, 0x1a, 0xa8, 0xc5, 0x0f, 0xe9, 0x00, 0x73,
	0xe0, 0xf2, 0xe3, 0xc2, 0x32, 0x18, 0x83, 0x9e, 0x7a, 0x96, 0xb7, 0x3e, 0x8f, 0xc1, 0x58, 0x85,
	0x11, 0xbd, 0x04, 0xe3, 0xf2, 0xfa, 0xcb, 0x58, 0xb1, 0x2b, 0xd8, 0x52, 0x1b, 0x6d, 0x2c, 0x5f,
	0x17, 0xed, 0x71, 0xe8, 0x4d, 0xf8, 0x7f, 0xc8, 0x8e, 0xdf, 0x4b, 0xe2, 0xae, 0xaf, 0x33, 0xac,
	0x9b, 0xd5, 0x45, 0xbf, 0x78, 0x00, 0xb3, 0xfd, 0x1b, 0xb6, 0x32, 0x8c, 0x40, 0xa6, 0x8d, 0xbb,
	0x7f, 0x4d, 0x47, 0xb4, 0x7b, 0x00, 0xb1, 0xd9, 0x35, 0x92, 0xa0, 0x3f, 0x39, 0xa3, 0x30, 0x3c,
	0x17, 0xb1, 0xbd, 0x84, 0xb9, 0xe4, 0x24, 0xe5, 0x93, 0xb0, 0x44, 0x81, 0xb1, 0x3e, 0xa2, 0xa0,
	0x47, 0xbe, 0x5d, 0x3e, 0xbd, 0x34, 0xb5, 0xb3, 0x4b, 0x53, 0xfb, 0x71, 0x69, 0x6a, 0xef, 0xae,
	0xcc, 0xd4, 0xd9, 0x95, 0x99, 0xfa, 0x76, 0x65, 0xa6, 0x5e, 0xc4, 0x2f, 0xf5, 0x27, 0xcf, 0x9e,
	0x77, 0x37, 0xc9, 0x11, 0xad, 0xa3, 0x23, 0x5b, 0x3e, 0xb8, 0x5d, 0xf9, 0xe4, 0xca, 0x9b, 0xbd,
	0x3e, 0x21, 0x1f, 0xbf, 0x07, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x52, 0x94, 0xcb, 0x8b,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Swap defines a method for swapping between two coins.
	Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error)
	// RegisterReserveAccount defines a method for updating the reserve account address.
	RegisterReserveAccount(ctx context.Context, in *MsgRegisterReserveAccount, opts ...grpc.CallOption) (*MsgRegisterReserveAccountResponse, error)
	// RegisterAdmin defines a method for registering admin for specific coin pair.
	RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error)
	// UpdateRate defines a method for updating the currencsy rate for coin pair.
	UpdateRate(ctx context.Context, in *MsgUpdateRate, opts ...grpc.CallOption) (*MsgUpdateRateResponse, error)
	// ChangeModerator defines a method for changing moderator.
	ChangeModerator(ctx context.Context, in *MsgChangeModerator, opts ...grpc.CallOption) (*MsgChangeModeratorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Swap(ctx context.Context, in *MsgSwap, opts ...grpc.CallOption) (*MsgSwapResponse, error) {
	out := new(MsgSwapResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Msg/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterReserveAccount(ctx context.Context, in *MsgRegisterReserveAccount, opts ...grpc.CallOption) (*MsgRegisterReserveAccountResponse, error) {
	out := new(MsgRegisterReserveAccountResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Msg/RegisterReserveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error) {
	out := new(MsgRegisterAdminResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Msg/RegisterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRate(ctx context.Context, in *MsgUpdateRate, opts ...grpc.CallOption) (*MsgUpdateRateResponse, error) {
	out := new(MsgUpdateRateResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Msg/UpdateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeModerator(ctx context.Context, in *MsgChangeModerator, opts ...grpc.CallOption) (*MsgChangeModeratorResponse, error) {
	out := new(MsgChangeModeratorResponse)
	err := c.cc.Invoke(ctx, "/guru.cex.v1.Msg/ChangeModerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Swap defines a method for swapping between two coins.
	Swap(context.Context, *MsgSwap) (*MsgSwapResponse, error)
	// RegisterReserveAccount defines a method for updating the reserve account address.
	RegisterReserveAccount(context.Context, *MsgRegisterReserveAccount) (*MsgRegisterReserveAccountResponse, error)
	// RegisterAdmin defines a method for registering admin for specific coin pair.
	RegisterAdmin(context.Context, *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error)
	// UpdateRate defines a method for updating the currencsy rate for coin pair.
	UpdateRate(context.Context, *MsgUpdateRate) (*MsgUpdateRateResponse, error)
	// ChangeModerator defines a method for changing moderator.
	ChangeModerator(context.Context, *MsgChangeModerator) (*MsgChangeModeratorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Swap(ctx context.Context, req *MsgSwap) (*MsgSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedMsgServer) RegisterReserveAccount(ctx context.Context, req *MsgRegisterReserveAccount) (*MsgRegisterReserveAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReserveAccount not implemented")
}
func (*UnimplementedMsgServer) RegisterAdmin(ctx context.Context, req *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (*UnimplementedMsgServer) UpdateRate(ctx context.Context, req *MsgUpdateRate) (*MsgUpdateRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRate not implemented")
}
func (*UnimplementedMsgServer) ChangeModerator(ctx context.Context, req *MsgChangeModerator) (*MsgChangeModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModerator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Msg/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Swap(ctx, req.(*MsgSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterReserveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterReserveAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterReserveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Msg/RegisterReserveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterReserveAccount(ctx, req.(*MsgRegisterReserveAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Msg/RegisterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAdmin(ctx, req.(*MsgRegisterAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Msg/UpdateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRate(ctx, req.(*MsgUpdateRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeModerator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.cex.v1.Msg/ChangeModerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeModerator(ctx, req.(*MsgChangeModerator))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.cex.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Swap",
			Handler:    _Msg_Swap_Handler,
		},
		{
			MethodName: "RegisterReserveAccount",
			Handler:    _Msg_RegisterReserveAccount_Handler,
		},
		{
			MethodName: "RegisterAdmin",
			Handler:    _Msg_RegisterAdmin_Handler,
		},
		{
			MethodName: "UpdateRate",
			Handler:    _Msg_UpdateRate_Handler,
		},
		{
			MethodName: "ChangeModerator",
			Handler:    _Msg_ChangeModerator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/cex/v1/tx.proto",
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ToChannel) > 0 {
		i -= len(m.ToChannel)
		copy(dAtA[i:], m.ToChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToChannel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToDenom) > 0 {
		i -= len(m.ToDenom)
		copy(dAtA[i:], m.ToDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromChannel) > 0 {
		i -= len(m.FromChannel)
		copy(dAtA[i:], m.FromChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromDenom) > 0 {
		i -= len(m.FromDenom)
		copy(dAtA[i:], m.FromDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewReserveAddress) > 0 {
		i -= len(m.NewReserveAddress)
		copy(dAtA[i:], m.NewReserveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewReserveAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterReserveAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterReserveAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterReserveAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PairDenom) > 0 {
		i -= len(m.PairDenom)
		copy(dAtA[i:], m.PairDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PairDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewAdminAddress) > 0 {
		i -= len(m.NewAdminAddress)
		copy(dAtA[i:], m.NewAdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewRate) > 0 {
		i -= len(m.NewRate)
		copy(dAtA[i:], m.NewRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PairDenom) > 0 {
		i -= len(m.PairDenom)
		copy(dAtA[i:], m.PairDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PairDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeModerator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeModerator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeModerator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewModeratorAddress) > 0 {
		i -= len(m.NewModeratorAddress)
		copy(dAtA[i:], m.NewModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModeratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeModeratorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeModeratorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeModeratorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterReserveAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewReserveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterReserveAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PairDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PairDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeModerator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeModeratorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterReserveAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterReserveAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterReserveAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeModerator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeModerator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeModerator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeModeratorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeModeratorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeModeratorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
