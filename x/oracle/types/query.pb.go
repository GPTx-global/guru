// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method
type QueryParamsResponse struct {
	// params holds all the parameters of this module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOracleSubmitDataRequest is request type for the Query/OracleSubmitData RPC method
type QueryOracleSubmitDataRequest struct {
	// request_id is the unique identifier of the oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Nonce     uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Provider  string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryOracleSubmitDataRequest) Reset()         { *m = QueryOracleSubmitDataRequest{} }
func (m *QueryOracleSubmitDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSubmitDataRequest) ProtoMessage()    {}
func (*QueryOracleSubmitDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{2}
}
func (m *QueryOracleSubmitDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSubmitDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSubmitDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSubmitDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSubmitDataRequest.Merge(m, src)
}
func (m *QueryOracleSubmitDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSubmitDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSubmitDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSubmitDataRequest proto.InternalMessageInfo

func (m *QueryOracleSubmitDataRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *QueryOracleSubmitDataRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryOracleSubmitDataRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// QueryOracleSubmitDataResponse is response type for the Query/OracleSubmitData RPC method
type QueryOracleSubmitDataResponse struct {
	// submit_datas is the list of oracle submit data for the requested ID, nonce and provider
	SubmitDatas []*SubmitDataSet `protobuf:"bytes,1,rep,name=submit_datas,json=submitDatas,proto3" json:"submit_datas,omitempty"`
}

func (m *QueryOracleSubmitDataResponse) Reset()         { *m = QueryOracleSubmitDataResponse{} }
func (m *QueryOracleSubmitDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSubmitDataResponse) ProtoMessage()    {}
func (*QueryOracleSubmitDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{3}
}
func (m *QueryOracleSubmitDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSubmitDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSubmitDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSubmitDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSubmitDataResponse.Merge(m, src)
}
func (m *QueryOracleSubmitDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSubmitDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSubmitDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSubmitDataResponse proto.InternalMessageInfo

func (m *QueryOracleSubmitDataResponse) GetSubmitDatas() []*SubmitDataSet {
	if m != nil {
		return m.SubmitDatas
	}
	return nil
}

// QueryOracleDataRequest is request type for the Query/OracleData RPC method
type QueryOracleDataRequest struct {
	// request_id is the unique identifier of the oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryOracleDataRequest) Reset()         { *m = QueryOracleDataRequest{} }
func (m *QueryOracleDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataRequest) ProtoMessage()    {}
func (*QueryOracleDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{4}
}
func (m *QueryOracleDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataRequest.Merge(m, src)
}
func (m *QueryOracleDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataRequest proto.InternalMessageInfo

func (m *QueryOracleDataRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// QueryOracleDataResponse is response type for the Query/OracleData RPC method
type QueryOracleDataResponse struct {
	// data is the oracle data for the requested ID
	DataSet *DataSet `protobuf:"bytes,1,opt,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
}

func (m *QueryOracleDataResponse) Reset()         { *m = QueryOracleDataResponse{} }
func (m *QueryOracleDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataResponse) ProtoMessage()    {}
func (*QueryOracleDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{5}
}
func (m *QueryOracleDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataResponse.Merge(m, src)
}
func (m *QueryOracleDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataResponse proto.InternalMessageInfo

func (m *QueryOracleDataResponse) GetDataSet() *DataSet {
	if m != nil {
		return m.DataSet
	}
	return nil
}

// QueryOracleRequestRequest is request type for the Query/OracleRequest RPC method
type QueryOracleRequestDocRequest struct {
	// request_id is the unique identifier of the oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryOracleRequestDocRequest) Reset()         { *m = QueryOracleRequestDocRequest{} }
func (m *QueryOracleRequestDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocRequest) ProtoMessage()    {}
func (*QueryOracleRequestDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{6}
}
func (m *QueryOracleRequestDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocRequest.Merge(m, src)
}
func (m *QueryOracleRequestDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocRequest proto.InternalMessageInfo

func (m *QueryOracleRequestDocRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// QueryOracleRequestResponse is response type for the Query/OracleRequest RPC method
type QueryOracleRequestDocResponse struct {
	// request is the oracle request for the requested ID
	RequestDoc OracleRequestDoc `protobuf:"bytes,1,opt,name=request_doc,json=requestDoc,proto3" json:"request_doc"`
}

func (m *QueryOracleRequestDocResponse) Reset()         { *m = QueryOracleRequestDocResponse{} }
func (m *QueryOracleRequestDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocResponse) ProtoMessage()    {}
func (*QueryOracleRequestDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{7}
}
func (m *QueryOracleRequestDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocResponse.Merge(m, src)
}
func (m *QueryOracleRequestDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocResponse proto.InternalMessageInfo

func (m *QueryOracleRequestDocResponse) GetRequestDoc() OracleRequestDoc {
	if m != nil {
		return m.RequestDoc
	}
	return OracleRequestDoc{}
}

// QueryOracleRequestDocRequest is the request type for the Query/OracleRequestDoc RPC method
type QueryOracleRequestDocsRequest struct {
}

func (m *QueryOracleRequestDocsRequest) Reset()         { *m = QueryOracleRequestDocsRequest{} }
func (m *QueryOracleRequestDocsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocsRequest) ProtoMessage()    {}
func (*QueryOracleRequestDocsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{8}
}
func (m *QueryOracleRequestDocsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocsRequest.Merge(m, src)
}
func (m *QueryOracleRequestDocsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocsRequest proto.InternalMessageInfo

// QueryOracleRequestDocResponse is the response type for the Query/OracleRequestDoc RPC method
type QueryOracleRequestDocsResponse struct {
	OracleRequestDocs []*OracleRequestDoc `protobuf:"bytes,1,rep,name=oracle_request_docs,json=oracleRequestDocs,proto3" json:"oracle_request_docs,omitempty"`
}

func (m *QueryOracleRequestDocsResponse) Reset()         { *m = QueryOracleRequestDocsResponse{} }
func (m *QueryOracleRequestDocsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocsResponse) ProtoMessage()    {}
func (*QueryOracleRequestDocsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{9}
}
func (m *QueryOracleRequestDocsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocsResponse.Merge(m, src)
}
func (m *QueryOracleRequestDocsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocsResponse proto.InternalMessageInfo

func (m *QueryOracleRequestDocsResponse) GetOracleRequestDocs() []*OracleRequestDoc {
	if m != nil {
		return m.OracleRequestDocs
	}
	return nil
}

// QueryModeratorAddressRequest is request type for the Query/ModeratorAddress RPC method
type QueryModeratorAddressRequest struct {
}

func (m *QueryModeratorAddressRequest) Reset()         { *m = QueryModeratorAddressRequest{} }
func (m *QueryModeratorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressRequest) ProtoMessage()    {}
func (*QueryModeratorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{10}
}
func (m *QueryModeratorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressRequest.Merge(m, src)
}
func (m *QueryModeratorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressRequest proto.InternalMessageInfo

// QueryModeratorAddressResponse is response type for the Query/ModeratorAddress RPC method
type QueryModeratorAddressResponse struct {
	// moderator_address is the address of the moderator
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *QueryModeratorAddressResponse) Reset()         { *m = QueryModeratorAddressResponse{} }
func (m *QueryModeratorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressResponse) ProtoMessage()    {}
func (*QueryModeratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{11}
}
func (m *QueryModeratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressResponse.Merge(m, src)
}
func (m *QueryModeratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressResponse proto.InternalMessageInfo

func (m *QueryModeratorAddressResponse) GetModeratorAddress() string {
	if m != nil {
		return m.ModeratorAddress
	}
	return ""
}

// QueryPredefinedOraclesRequest is request type for the Query/PredefinedOracles RPC method
type QueryPredefinedOraclesRequest struct {
}

func (m *QueryPredefinedOraclesRequest) Reset()         { *m = QueryPredefinedOraclesRequest{} }
func (m *QueryPredefinedOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPredefinedOraclesRequest) ProtoMessage()    {}
func (*QueryPredefinedOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{12}
}
func (m *QueryPredefinedOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPredefinedOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPredefinedOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPredefinedOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPredefinedOraclesRequest.Merge(m, src)
}
func (m *QueryPredefinedOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPredefinedOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPredefinedOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPredefinedOraclesRequest proto.InternalMessageInfo

// QueryPredefinedOraclesResponse is response type for the Query/PredefinedOracles RPC method
type QueryPredefinedOraclesResponse struct {
	PredefinedOracles []*PredefinedOracle `protobuf:"bytes,1,rep,name=predefined_oracles,json=predefinedOracles,proto3" json:"predefined_oracles,omitempty"`
}

func (m *QueryPredefinedOraclesResponse) Reset()         { *m = QueryPredefinedOraclesResponse{} }
func (m *QueryPredefinedOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPredefinedOraclesResponse) ProtoMessage()    {}
func (*QueryPredefinedOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{13}
}
func (m *QueryPredefinedOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPredefinedOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPredefinedOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPredefinedOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPredefinedOraclesResponse.Merge(m, src)
}
func (m *QueryPredefinedOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPredefinedOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPredefinedOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPredefinedOraclesResponse proto.InternalMessageInfo

func (m *QueryPredefinedOraclesResponse) GetPredefinedOracles() []*PredefinedOracle {
	if m != nil {
		return m.PredefinedOracles
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "guru.oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "guru.oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryOracleSubmitDataRequest)(nil), "guru.oracle.v1.QueryOracleSubmitDataRequest")
	proto.RegisterType((*QueryOracleSubmitDataResponse)(nil), "guru.oracle.v1.QueryOracleSubmitDataResponse")
	proto.RegisterType((*QueryOracleDataRequest)(nil), "guru.oracle.v1.QueryOracleDataRequest")
	proto.RegisterType((*QueryOracleDataResponse)(nil), "guru.oracle.v1.QueryOracleDataResponse")
	proto.RegisterType((*QueryOracleRequestDocRequest)(nil), "guru.oracle.v1.QueryOracleRequestDocRequest")
	proto.RegisterType((*QueryOracleRequestDocResponse)(nil), "guru.oracle.v1.QueryOracleRequestDocResponse")
	proto.RegisterType((*QueryOracleRequestDocsRequest)(nil), "guru.oracle.v1.QueryOracleRequestDocsRequest")
	proto.RegisterType((*QueryOracleRequestDocsResponse)(nil), "guru.oracle.v1.QueryOracleRequestDocsResponse")
	proto.RegisterType((*QueryModeratorAddressRequest)(nil), "guru.oracle.v1.QueryModeratorAddressRequest")
	proto.RegisterType((*QueryModeratorAddressResponse)(nil), "guru.oracle.v1.QueryModeratorAddressResponse")
	proto.RegisterType((*QueryPredefinedOraclesRequest)(nil), "guru.oracle.v1.QueryPredefinedOraclesRequest")
	proto.RegisterType((*QueryPredefinedOraclesResponse)(nil), "guru.oracle.v1.QueryPredefinedOraclesResponse")
}

func init() { proto.RegisterFile("guru/oracle/v1/query.proto", fileDescriptor_9ff70f57bb718019) }

var fileDescriptor_9ff70f57bb718019 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x4d, 0x4f, 0x13, 0x4f,
	0x1c, 0xc7, 0xbb, 0x3c, 0xfd, 0x61, 0xfa, 0x8f, 0xa1, 0x03, 0x02, 0x16, 0x58, 0x60, 0x40, 0x41,
	0x94, 0x6e, 0xa8, 0x26, 0x1e, 0x0c, 0x89, 0x62, 0x13, 0x62, 0x94, 0x50, 0x17, 0x4f, 0x5e, 0x9a,
	0x69, 0x77, 0x5c, 0x36, 0x69, 0x77, 0x96, 0xdd, 0x2d, 0x81, 0x10, 0x2e, 0x9e, 0x3c, 0x1a, 0xbd,
	0x78, 0xf2, 0x0d, 0x78, 0xf5, 0x45, 0x70, 0x24, 0xf1, 0xe2, 0xc9, 0x18, 0xf0, 0x85, 0x98, 0xce,
	0xcc, 0x6e, 0x77, 0x67, 0x99, 0xd2, 0xdb, 0xee, 0xfe, 0x9e, 0x3e, 0xf3, 0xed, 0xfc, 0xbe, 0x29,
	0x28, 0xda, 0x6d, 0xbf, 0x6d, 0x50, 0x1f, 0x37, 0x9a, 0xc4, 0x38, 0xda, 0x34, 0x0e, 0xdb, 0xc4,
	0x3f, 0x29, 0x79, 0x3e, 0x0d, 0x29, 0xbc, 0xd5, 0x89, 0x95, 0x78, 0xac, 0x74, 0xb4, 0x59, 0x9c,
	0xb4, 0xa9, 0x4d, 0x59, 0xc8, 0xe8, 0x3c, 0xf1, 0xac, 0xe2, 0x9c, 0x4d, 0xa9, 0xdd, 0x24, 0x06,
	0xf6, 0x1c, 0x03, 0xbb, 0x2e, 0x0d, 0x71, 0xe8, 0x50, 0x37, 0x10, 0xd1, 0x59, 0xa9, 0xbf, 0xe8,
	0x16, 0x95, 0xa6, 0x83, 0x36, 0x71, 0x49, 0xe0, 0x88, 0x52, 0x34, 0x09, 0xe0, 0x9b, 0x0e, 0x4d,
	0x15, 0xfb, 0xb8, 0x15, 0x98, 0xe4, 0xb0, 0x4d, 0x82, 0x10, 0xbd, 0x02, 0x13, 0xa9, 0xaf, 0x81,
	0x47, 0xdd, 0x80, 0xc0, 0xc7, 0x60, 0xc4, 0x63, 0x5f, 0x66, 0xb4, 0x45, 0x6d, 0x2d, 0x5f, 0x9e,
	0x2a, 0xa5, 0xe1, 0x4b, 0x3c, 0x7f, 0x7b, 0xe8, 0xfc, 0xf7, 0x42, 0xce, 0x14, 0xb9, 0x88, 0x82,
	0x39, 0xd6, 0x6c, 0x8f, 0xa5, 0xed, 0xb7, 0xeb, 0x2d, 0x27, 0xac, 0xe0, 0x10, 0x8b, 0x61, 0x70,
	0x1e, 0x00, 0x9f, 0x3f, 0xd6, 0x1c, 0x8b, 0x75, 0x1e, 0x32, 0xc7, 0xc4, 0x97, 0x97, 0x16, 0x9c,
	0x04, 0xc3, 0x2e, 0x75, 0x1b, 0x64, 0x66, 0x80, 0x45, 0xf8, 0x0b, 0x2c, 0x82, 0x51, 0xcf, 0xa7,
	0x47, 0x8e, 0x45, 0xfc, 0x99, 0xc1, 0x45, 0x6d, 0x6d, 0xcc, 0x8c, 0xdf, 0x11, 0x06, 0xf3, 0x8a,
	0x81, 0xe2, 0x1c, 0xcf, 0xc0, 0xff, 0x01, 0xfb, 0x5a, 0xb3, 0x70, 0x88, 0x3b, 0xa7, 0x19, 0x5c,
	0xcb, 0x97, 0xe7, 0xe5, 0xd3, 0x74, 0x2b, 0xf7, 0x49, 0x68, 0xe6, 0x83, 0xf8, 0x35, 0x40, 0x4f,
	0xc0, 0x54, 0x62, 0x44, 0xff, 0xa7, 0x41, 0xbb, 0x60, 0x3a, 0x53, 0x28, 0xa8, 0xca, 0x60, 0xb4,
	0x83, 0x53, 0x0b, 0x48, 0x28, 0xf4, 0x9d, 0x96, 0x89, 0x22, 0x96, 0xff, 0x2c, 0xfe, 0x80, 0xb6,
	0x52, 0xda, 0x0a, 0x86, 0x0a, 0x6d, 0xf4, 0x49, 0x73, 0x90, 0x52, 0x2a, 0x59, 0x2e, 0x98, 0x76,
	0x40, 0x3e, 0xaa, 0xb7, 0x68, 0x43, 0x60, 0x2d, 0xca, 0x58, 0x72, 0xb9, 0xb8, 0x00, 0xd1, 0xe8,
	0x0a, 0x6d, 0xa0, 0x05, 0xc5, 0xa4, 0xf8, 0xca, 0xf9, 0x40, 0x57, 0x25, 0x08, 0x96, 0x2a, 0x98,
	0xe0, 0x23, 0x6b, 0x09, 0xa4, 0xe8, 0xc7, 0xbb, 0x91, 0xc9, 0x2c, 0x50, 0xb9, 0x33, 0xd2, 0x85,
	0x7a, 0xbb, 0xd4, 0x22, 0x3e, 0x0e, 0xa9, 0xff, 0xdc, 0xb2, 0x7c, 0x12, 0xc4, 0x4c, 0xaf, 0x05,
	0x74, 0x36, 0x2e, 0x90, 0x1e, 0x80, 0x42, 0x2b, 0x8a, 0xd5, 0x30, 0x0f, 0x32, 0x91, 0xc6, 0xcc,
	0xf1, 0x96, 0x54, 0x14, 0x4b, 0x50, 0xf5, 0x89, 0x45, 0xde, 0x3b, 0x2e, 0xb1, 0x38, 0x63, 0x3c,
	0xee, 0x50, 0x48, 0x70, 0x4d, 0x82, 0x98, 0xb7, 0x07, 0xa0, 0x17, 0x07, 0x6b, 0xfc, 0x40, 0x4a,
	0x05, 0xe4, 0x36, 0x66, 0xc1, 0x93, 0x1b, 0x97, 0xbf, 0x8f, 0x82, 0x61, 0x36, 0x13, 0xba, 0x60,
	0x84, 0x6f, 0x2f, 0x44, 0x72, 0xa3, 0xac, 0x41, 0x14, 0x97, 0x7b, 0xe6, 0x70, 0x5a, 0x34, 0xfb,
	0xe1, 0xe7, 0xdf, 0x2f, 0x03, 0xb7, 0xe1, 0x84, 0x91, 0xb4, 0x20, 0xee, 0x0a, 0xf0, 0x87, 0x06,
	0xc6, 0xe5, 0x05, 0x85, 0x0f, 0xaf, 0x6d, 0xab, 0x30, 0x8e, 0xe2, 0x46, 0x9f, 0xd9, 0x02, 0xe7,
	0x05, 0xc3, 0xd9, 0x82, 0x4f, 0x0d, 0xc9, 0x11, 0x13, 0x5e, 0x60, 0x9c, 0x76, 0xd7, 0xe5, 0xcc,
	0x38, 0x65, 0x5e, 0x73, 0x66, 0x9c, 0x46, 0xd6, 0x72, 0x06, 0x3f, 0x6a, 0x00, 0x74, 0x77, 0x17,
	0xde, 0xeb, 0x81, 0x90, 0x44, 0x5d, 0xbd, 0x31, 0x4f, 0x40, 0xde, 0x67, 0x90, 0xcb, 0x70, 0x49,
	0x86, 0xcc, 0xd0, 0xc1, 0x6f, 0xb1, 0x82, 0xdd, 0x3b, 0xdd, 0x53, 0xc1, 0x8c, 0x3d, 0xf4, 0x54,
	0x30, 0xeb, 0x06, 0x68, 0x83, 0xc1, 0xad, 0xc2, 0xbb, 0x29, 0xb8, 0xc4, 0x36, 0xa6, 0x01, 0xbf,
	0x6a, 0xa0, 0x90, 0x59, 0x67, 0xd8, 0xdf, 0xcc, 0xf8, 0xa6, 0x95, 0xfa, 0x4d, 0x17, 0x8c, 0x2b,
	0x8c, 0x51, 0x87, 0x73, 0xb2, 0x80, 0x49, 0xd3, 0x80, 0x9f, 0x35, 0x30, 0x2e, 0x6f, 0xb5, 0x42,
	0x3b, 0x85, 0x39, 0x28, 0xb4, 0x53, 0x59, 0x05, 0x5a, 0x62, 0x5c, 0xb3, 0xf0, 0x8e, 0xcc, 0x15,
	0xfb, 0x44, 0xe7, 0x07, 0x2d, 0x64, 0x76, 0x5f, 0xa1, 0x97, 0xca, 0x44, 0x14, 0x7a, 0x29, 0x2d,
	0x05, 0xad, 0x33, 0xae, 0x15, 0x88, 0x64, 0xae, 0xac, 0xd1, 0x6c, 0x57, 0xce, 0x2f, 0x75, 0xed,
	0xe2, 0x52, 0xd7, 0xfe, 0x5c, 0xea, 0xda, 0xa7, 0x2b, 0x3d, 0x77, 0x71, 0xa5, 0xe7, 0x7e, 0x5d,
	0xe9, 0xb9, 0x77, 0xeb, 0xb6, 0x13, 0x1e, 0xb4, 0xeb, 0xa5, 0x06, 0x6d, 0x19, 0x3b, 0xd5, 0xb7,
	0xc7, 0x1b, 0x76, 0x93, 0xd6, 0x71, 0x93, 0xf7, 0x3c, 0x8e, 0xba, 0x86, 0x27, 0x1e, 0x09, 0xea,
	0x23, 0xec, 0x9f, 0xc7, 0xa3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xf4, 0x88, 0x0b, 0x16,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OracleSubmitData queries oracle data by ID
	OracleSubmitData(ctx context.Context, in *QueryOracleSubmitDataRequest, opts ...grpc.CallOption) (*QueryOracleSubmitDataResponse, error)
	// OracleData queries oracle data by ID
	OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error)
	// ModeratorAddress queries the moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
	// PredefinedOracles queries the predefined oracles
	PredefinedOracles(ctx context.Context, in *QueryPredefinedOraclesRequest, opts ...grpc.CallOption) (*QueryPredefinedOraclesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSubmitData(ctx context.Context, in *QueryOracleSubmitDataRequest, opts ...grpc.CallOption) (*QueryOracleSubmitDataResponse, error) {
	out := new(QueryOracleSubmitDataResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleSubmitData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error) {
	out := new(QueryOracleDataResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error) {
	out := new(QueryOracleRequestDocResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleRequestDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error) {
	out := new(QueryOracleRequestDocsResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleRequestDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/ModeratorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PredefinedOracles(ctx context.Context, in *QueryPredefinedOraclesRequest, opts ...grpc.CallOption) (*QueryPredefinedOraclesResponse, error) {
	out := new(QueryPredefinedOraclesResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/PredefinedOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OracleSubmitData queries oracle data by ID
	OracleSubmitData(context.Context, *QueryOracleSubmitDataRequest) (*QueryOracleSubmitDataResponse, error)
	// OracleData queries oracle data by ID
	OracleData(context.Context, *QueryOracleDataRequest) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(context.Context, *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(context.Context, *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error)
	// ModeratorAddress queries the moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	// PredefinedOracles queries the predefined oracles
	PredefinedOracles(context.Context, *QueryPredefinedOraclesRequest) (*QueryPredefinedOraclesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OracleSubmitData(ctx context.Context, req *QueryOracleSubmitDataRequest) (*QueryOracleSubmitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSubmitData not implemented")
}
func (*UnimplementedQueryServer) OracleData(ctx context.Context, req *QueryOracleDataRequest) (*QueryOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleData not implemented")
}
func (*UnimplementedQueryServer) OracleRequestDoc(ctx context.Context, req *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDoc not implemented")
}
func (*UnimplementedQueryServer) OracleRequestDocs(ctx context.Context, req *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDocs not implemented")
}
func (*UnimplementedQueryServer) ModeratorAddress(ctx context.Context, req *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (*UnimplementedQueryServer) PredefinedOracles(ctx context.Context, req *QueryPredefinedOraclesRequest) (*QueryPredefinedOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedOracles not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSubmitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSubmitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSubmitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleSubmitData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSubmitData(ctx, req.(*QueryOracleSubmitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleData(ctx, req.(*QueryOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleRequestDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDoc(ctx, req.(*QueryOracleRequestDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleRequestDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDocs(ctx, req.(*QueryOracleRequestDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/ModeratorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PredefinedOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPredefinedOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PredefinedOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/PredefinedOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PredefinedOracles(ctx, req.(*QueryPredefinedOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OracleSubmitData",
			Handler:    _Query_OracleSubmitData_Handler,
		},
		{
			MethodName: "OracleData",
			Handler:    _Query_OracleData_Handler,
		},
		{
			MethodName: "OracleRequestDoc",
			Handler:    _Query_OracleRequestDoc_Handler,
		},
		{
			MethodName: "OracleRequestDocs",
			Handler:    _Query_OracleRequestDocs_Handler,
		},
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
		{
			MethodName: "PredefinedOracles",
			Handler:    _Query_PredefinedOracles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/oracle/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOracleSubmitDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSubmitDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSubmitDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSubmitDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSubmitDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSubmitDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubmitDatas) > 0 {
		for iNdEx := len(m.SubmitDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubmitDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSet != nil {
		{
			size, err := m.DataSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RequestDoc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleRequestDocs) > 0 {
		for iNdEx := len(m.OracleRequestDocs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleRequestDocs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModeratorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModeratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPredefinedOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPredefinedOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPredefinedOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPredefinedOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPredefinedOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPredefinedOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PredefinedOracles) > 0 {
		for iNdEx := len(m.PredefinedOracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PredefinedOracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOracleSubmitDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleSubmitDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubmitDatas) > 0 {
		for _, e := range m.SubmitDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOracleDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryOracleDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSet != nil {
		l = m.DataSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRequestDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryOracleRequestDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RequestDoc.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOracleRequestDocsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOracleRequestDocsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleRequestDocs) > 0 {
		for _, e := range m.OracleRequestDocs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryModeratorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModeratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPredefinedOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPredefinedOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PredefinedOracles) > 0 {
		for _, e := range m.PredefinedOracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSubmitDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSubmitDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSubmitDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSubmitDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSubmitDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSubmitDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitDatas = append(m.SubmitDatas, &SubmitDataSet{})
			if err := m.SubmitDatas[len(m.SubmitDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSet == nil {
				m.DataSet = &DataSet{}
			}
			if err := m.DataSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestDoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequestDocs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleRequestDocs = append(m.OracleRequestDocs, &OracleRequestDoc{})
			if err := m.OracleRequestDocs[len(m.OracleRequestDocs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModeratorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModeratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPredefinedOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPredefinedOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPredefinedOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPredefinedOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPredefinedOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPredefinedOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredefinedOracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredefinedOracles = append(m.PredefinedOracles, &PredefinedOracle{})
			if err := m.PredefinedOracles[len(m.PredefinedOracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
