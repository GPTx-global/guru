// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method
type QueryParamsResponse struct {
	// params holds all the parameters of this module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOracleDataRequest is request type for the Query/OracleData RPC method
type QueryOracleDataRequest struct {
	// request_id is the unique identifier of the oracle request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryOracleDataRequest) Reset()         { *m = QueryOracleDataRequest{} }
func (m *QueryOracleDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataRequest) ProtoMessage()    {}
func (*QueryOracleDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{2}
}
func (m *QueryOracleDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataRequest.Merge(m, src)
}
func (m *QueryOracleDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataRequest proto.InternalMessageInfo

func (m *QueryOracleDataRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryOracleDataResponse is response type for the Query/OracleData RPC method
type QueryOracleDataResponse struct {
	// data is the oracle data for the requested ID
	DataSet *DataSet `protobuf:"bytes,1,opt,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
}

func (m *QueryOracleDataResponse) Reset()         { *m = QueryOracleDataResponse{} }
func (m *QueryOracleDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataResponse) ProtoMessage()    {}
func (*QueryOracleDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{3}
}
func (m *QueryOracleDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataResponse.Merge(m, src)
}
func (m *QueryOracleDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataResponse proto.InternalMessageInfo

func (m *QueryOracleDataResponse) GetDataSet() *DataSet {
	if m != nil {
		return m.DataSet
	}
	return nil
}

// QueryOracleRequestRequest is request type for the Query/OracleRequest RPC method
type QueryOracleRequestDocRequest struct {
	// request_id is the unique identifier of the oracle request
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryOracleRequestDocRequest) Reset()         { *m = QueryOracleRequestDocRequest{} }
func (m *QueryOracleRequestDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocRequest) ProtoMessage()    {}
func (*QueryOracleRequestDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{4}
}
func (m *QueryOracleRequestDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocRequest.Merge(m, src)
}
func (m *QueryOracleRequestDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocRequest proto.InternalMessageInfo

func (m *QueryOracleRequestDocRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// QueryOracleRequestResponse is response type for the Query/OracleRequest RPC method
type QueryOracleRequestDocResponse struct {
	// request is the oracle request for the requested ID
	RequestDoc RequestOracleDoc `protobuf:"bytes,1,opt,name=request_doc,json=requestDoc,proto3" json:"request_doc"`
}

func (m *QueryOracleRequestDocResponse) Reset()         { *m = QueryOracleRequestDocResponse{} }
func (m *QueryOracleRequestDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocResponse) ProtoMessage()    {}
func (*QueryOracleRequestDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{5}
}
func (m *QueryOracleRequestDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocResponse.Merge(m, src)
}
func (m *QueryOracleRequestDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocResponse proto.InternalMessageInfo

func (m *QueryOracleRequestDocResponse) GetRequestDoc() RequestOracleDoc {
	if m != nil {
		return m.RequestDoc
	}
	return RequestOracleDoc{}
}

// QueryOracleRequestDocRequest is the request type for the Query/OracleRequestDoc RPC method
type QueryOracleRequestDocsRequest struct {
}

func (m *QueryOracleRequestDocsRequest) Reset()         { *m = QueryOracleRequestDocsRequest{} }
func (m *QueryOracleRequestDocsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocsRequest) ProtoMessage()    {}
func (*QueryOracleRequestDocsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{6}
}
func (m *QueryOracleRequestDocsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocsRequest.Merge(m, src)
}
func (m *QueryOracleRequestDocsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocsRequest proto.InternalMessageInfo

// QueryOracleRequestDocResponse is the response type for the Query/OracleRequestDoc RPC method
type QueryOracleRequestDocsResponse struct {
	RequestDocs []*RequestOracleDoc `protobuf:"bytes,1,rep,name=request_docs,json=requestDocs,proto3" json:"request_docs,omitempty"`
}

func (m *QueryOracleRequestDocsResponse) Reset()         { *m = QueryOracleRequestDocsResponse{} }
func (m *QueryOracleRequestDocsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequestDocsResponse) ProtoMessage()    {}
func (*QueryOracleRequestDocsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff70f57bb718019, []int{7}
}
func (m *QueryOracleRequestDocsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequestDocsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequestDocsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequestDocsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequestDocsResponse.Merge(m, src)
}
func (m *QueryOracleRequestDocsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequestDocsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequestDocsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequestDocsResponse proto.InternalMessageInfo

func (m *QueryOracleRequestDocsResponse) GetRequestDocs() []*RequestOracleDoc {
	if m != nil {
		return m.RequestDocs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "guru.oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "guru.oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryOracleDataRequest)(nil), "guru.oracle.v1.QueryOracleDataRequest")
	proto.RegisterType((*QueryOracleDataResponse)(nil), "guru.oracle.v1.QueryOracleDataResponse")
	proto.RegisterType((*QueryOracleRequestDocRequest)(nil), "guru.oracle.v1.QueryOracleRequestDocRequest")
	proto.RegisterType((*QueryOracleRequestDocResponse)(nil), "guru.oracle.v1.QueryOracleRequestDocResponse")
	proto.RegisterType((*QueryOracleRequestDocsRequest)(nil), "guru.oracle.v1.QueryOracleRequestDocsRequest")
	proto.RegisterType((*QueryOracleRequestDocsResponse)(nil), "guru.oracle.v1.QueryOracleRequestDocsResponse")
}

func init() { proto.RegisterFile("guru/oracle/v1/query.proto", fileDescriptor_9ff70f57bb718019) }

var fileDescriptor_9ff70f57bb718019 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x63, 0x28, 0x81, 0xbe, 0x20, 0x04, 0xd7, 0xd2, 0x22, 0x37, 0x75, 0x8b, 0x0b, 0x14,
	0x10, 0xf1, 0xa9, 0x01, 0x89, 0x89, 0xa5, 0x44, 0xaa, 0x10, 0x42, 0x14, 0xc3, 0xc4, 0x52, 0x5d,
	0xec, 0x93, 0x6b, 0x29, 0xf5, 0xb9, 0xf6, 0xb9, 0x6a, 0x85, 0x58, 0x98, 0x18, 0x91, 0x58, 0x98,
	0xf8, 0x53, 0x98, 0x3b, 0x56, 0x62, 0x61, 0x42, 0x28, 0xe1, 0x0f, 0x41, 0x3e, 0xbf, 0x34, 0xfe,
	0x41, 0x5a, 0x6f, 0xa7, 0x7b, 0xdf, 0xf7, 0x7d, 0x9f, 0xdc, 0xfb, 0xc6, 0xa0, 0x7b, 0x49, 0x94,
	0x50, 0x11, 0x31, 0x67, 0xc0, 0xe9, 0xc1, 0x06, 0xdd, 0x4f, 0x78, 0x74, 0x64, 0x85, 0x91, 0x90,
	0x82, 0x5c, 0x4b, 0x6b, 0x56, 0x56, 0xb3, 0x0e, 0x36, 0xf4, 0x79, 0x4f, 0x78, 0x42, 0x95, 0x68,
	0x7a, 0xca, 0x54, 0x7a, 0xdb, 0x13, 0xc2, 0x1b, 0x70, 0xca, 0x42, 0x9f, 0xb2, 0x20, 0x10, 0x92,
	0x49, 0x5f, 0x04, 0x31, 0x56, 0x97, 0x4a, 0xfe, 0xe8, 0x36, 0x6e, 0x2d, 0x16, 0x3d, 0x1e, 0xf0,
	0xd8, 0xc7, 0x56, 0x73, 0x1e, 0xc8, 0x9b, 0x94, 0x66, 0x9b, 0x45, 0x6c, 0x2f, 0xb6, 0xf9, 0x7e,
	0xc2, 0x63, 0x69, 0xbe, 0x84, 0xb9, 0xc2, 0x6d, 0x1c, 0x8a, 0x20, 0xe6, 0xe4, 0x09, 0x34, 0x43,
	0x75, 0x73, 0x4b, 0x5b, 0xd5, 0xee, 0xb7, 0xba, 0x0b, 0x56, 0x11, 0xde, 0xca, 0xf4, 0x9b, 0x33,
	0xc7, 0xbf, 0x57, 0x1a, 0x36, 0x6a, 0xcd, 0xa7, 0xb0, 0xa0, 0xcc, 0x5e, 0x2b, 0x59, 0x8f, 0x49,
	0x86, 0x63, 0xc8, 0x32, 0x40, 0x94, 0x1d, 0x77, 0x7c, 0x57, 0x79, 0xce, 0xda, 0xb3, 0x78, 0xf3,
	0xc2, 0x35, 0x5f, 0xc1, 0x62, 0xa5, 0x11, 0x49, 0xba, 0x70, 0xc5, 0x65, 0x92, 0xed, 0xc4, 0x5c,
	0x22, 0xcb, 0x62, 0x99, 0x25, 0xd5, 0xbf, 0xe5, 0xd2, 0xbe, 0xec, 0x66, 0x07, 0xf3, 0x19, 0xb4,
	0x73, 0x76, 0xc8, 0xd0, 0x13, 0x4e, 0x4d, 0x9a, 0x5d, 0x58, 0x9e, 0xd2, 0x8e, 0x4c, 0x5b, 0xd0,
	0x1a, 0xf7, 0xbb, 0xc2, 0x41, 0xac, 0xd5, 0x32, 0x16, 0x36, 0xe2, 0x6f, 0x12, 0x0e, 0x3e, 0xd6,
	0x78, 0x74, 0x4f, 0x38, 0xe6, 0xca, 0x94, 0x49, 0xa7, 0xeb, 0xe1, 0x60, 0x4c, 0x13, 0x20, 0xcb,
	0x73, 0xb8, 0x9a, 0x63, 0x49, 0xf7, 0x75, 0xb1, 0x0e, 0x8c, 0xdd, 0x9a, 0x60, 0xc4, 0xdd, 0x1f,
	0x33, 0x70, 0x49, 0xcd, 0x21, 0x01, 0x34, 0xb3, 0xd5, 0x12, 0xb3, 0x6c, 0x51, 0x4d, 0x8f, 0xbe,
	0x76, 0xa6, 0x26, 0x23, 0x34, 0x97, 0x3e, 0xfd, 0xfc, 0xfb, 0xf5, 0xc2, 0x4d, 0x32, 0x47, 0xf3,
	0xf9, 0xcc, 0x22, 0x43, 0x3e, 0x6b, 0x00, 0x93, 0xad, 0x93, 0x7b, 0xff, 0x35, 0xac, 0xe4, 0x49,
	0x5f, 0x3f, 0x57, 0x87, 0xc3, 0x1f, 0xa8, 0xe1, 0x6b, 0xe4, 0x36, 0x2d, 0xfd, 0x39, 0xd2, 0xac,
	0xd0, 0x0f, 0x93, 0x18, 0x7c, 0x24, 0xdf, 0x35, 0xb8, 0x5e, 0x7e, 0x67, 0xf2, 0xe8, 0x8c, 0x41,
	0x95, 0x60, 0xe9, 0x9d, 0x9a, 0x6a, 0x84, 0xeb, 0x28, 0xb8, 0x75, 0x72, 0xb7, 0x00, 0x97, 0x5b,
	0x67, 0x11, 0xf0, 0x9b, 0x06, 0x37, 0x2a, 0x41, 0x20, 0xf5, 0x66, 0x9e, 0xae, 0xcc, 0xaa, 0x2b,
	0x47, 0xc6, 0x3b, 0x8a, 0xd1, 0x20, 0xed, 0xf2, 0x03, 0xe6, 0x53, 0xb7, 0xd9, 0x3b, 0x1e, 0x1a,
	0xda, 0xc9, 0xd0, 0xd0, 0xfe, 0x0c, 0x0d, 0xed, 0xcb, 0xc8, 0x68, 0x9c, 0x8c, 0x8c, 0xc6, 0xaf,
	0x91, 0xd1, 0x78, 0xff, 0xd0, 0xf3, 0xe5, 0x6e, 0xd2, 0xb7, 0x1c, 0xb1, 0x47, 0xb7, 0xb6, 0xdf,
	0x1d, 0x76, 0xbc, 0x81, 0xe8, 0xb3, 0x41, 0xe6, 0x76, 0x38, 0xf6, 0x93, 0x47, 0x21, 0x8f, 0xfb,
	0x4d, 0xf5, 0xa5, 0x7a, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xb5, 0xc2, 0x8c, 0x46, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OracleData queries oracle data by ID
	OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleData(ctx context.Context, in *QueryOracleDataRequest, opts ...grpc.CallOption) (*QueryOracleDataResponse, error) {
	out := new(QueryOracleDataResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDoc(ctx context.Context, in *QueryOracleRequestDocRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocResponse, error) {
	out := new(QueryOracleRequestDocResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleRequestDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRequestDocs(ctx context.Context, in *QueryOracleRequestDocsRequest, opts ...grpc.CallOption) (*QueryOracleRequestDocsResponse, error) {
	out := new(QueryOracleRequestDocsResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Query/OracleRequestDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OracleData queries oracle data by ID
	OracleData(context.Context, *QueryOracleDataRequest) (*QueryOracleDataResponse, error)
	// OracleRequestDoc queries oracle request doc by ID
	OracleRequestDoc(context.Context, *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error)
	// OracleRequestDocs queries an oracle request document list
	OracleRequestDocs(context.Context, *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OracleData(ctx context.Context, req *QueryOracleDataRequest) (*QueryOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleData not implemented")
}
func (*UnimplementedQueryServer) OracleRequestDoc(ctx context.Context, req *QueryOracleRequestDocRequest) (*QueryOracleRequestDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDoc not implemented")
}
func (*UnimplementedQueryServer) OracleRequestDocs(ctx context.Context, req *QueryOracleRequestDocsRequest) (*QueryOracleRequestDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRequestDocs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleData(ctx, req.(*QueryOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleRequestDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDoc(ctx, req.(*QueryOracleRequestDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRequestDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequestDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRequestDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Query/OracleRequestDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRequestDocs(ctx, req.(*QueryOracleRequestDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OracleData",
			Handler:    _Query_OracleData_Handler,
		},
		{
			MethodName: "OracleRequestDoc",
			Handler:    _Query_OracleRequestDoc_Handler,
		},
		{
			MethodName: "OracleRequestDocs",
			Handler:    _Query_OracleRequestDocs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/oracle/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSet != nil {
		{
			size, err := m.DataSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RequestDoc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequestDocsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequestDocsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequestDocsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestDocs) > 0 {
		for iNdEx := len(m.RequestDocs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestDocs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOracleDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSet != nil {
		l = m.DataSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRequestDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRequestDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RequestDoc.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOracleRequestDocsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOracleRequestDocsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestDocs) > 0 {
		for _, e := range m.RequestDocs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSet == nil {
				m.DataSet = &DataSet{}
			}
			if err := m.DataSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestDoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequestDocsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequestDocsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequestDocsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDocs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestDocs = append(m.RequestDocs, &RequestOracleDoc{})
			if err := m.RequestDocs[len(m.RequestDocs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
