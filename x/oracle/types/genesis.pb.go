// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/oracle/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the oracle module's genesis state
type GenesisState struct {
	// params defines all the parameters of the module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// oracle_request_doc_count defines the count of oracle request documents
	OracleRequestDocCount uint64 `protobuf:"varint,2,opt,name=oracle_request_doc_count,json=oracleRequestDocCount,proto3" json:"oracle_request_doc_count,omitempty"`
	// request_oracle_docs defines the list of oracle request documents
	OracleRequestDocs []OracleRequestDoc `protobuf:"bytes,3,rep,name=oracle_request_docs,json=oracleRequestDocs,proto3" json:"oracle_request_docs"`
	// predefined_oracles defines the list of predefined oracles
	PredefinedOracles []PredefinedOracle `protobuf:"bytes,4,rep,name=predefined_oracles,json=predefinedOracles,proto3" json:"predefined_oracles"`
	// moderator_address defines the address of the oracle moderator
	ModeratorAddress string `protobuf:"bytes,5,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a1ce927fa70879, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetOracleRequestDocCount() uint64 {
	if m != nil {
		return m.OracleRequestDocCount
	}
	return 0
}

func (m *GenesisState) GetOracleRequestDocs() []OracleRequestDoc {
	if m != nil {
		return m.OracleRequestDocs
	}
	return nil
}

func (m *GenesisState) GetPredefinedOracles() []PredefinedOracle {
	if m != nil {
		return m.PredefinedOracles
	}
	return nil
}

func (m *GenesisState) GetModeratorAddress() string {
	if m != nil {
		return m.ModeratorAddress
	}
	return ""
}

// Params defines the parameters for the oracle module
type Params struct {
	// enable_oracle defines whether the oracle module is enabled
	EnableOracle bool `protobuf:"varint,1,opt,name=enable_oracle,json=enableOracle,proto3" json:"enable_oracle,omitempty"`
	// submit_window defines the time window in seconds for submitting oracle data
	SubmitWindow uint64 `protobuf:"varint,2,opt,name=submit_window,json=submitWindow,proto3" json:"submit_window,omitempty"`
	// min_submit_per_window defines the minimum number of submissions required per window
	MinSubmitPerWindow github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=min_submit_per_window,json=minSubmitPerWindow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_submit_per_window"`
	// slash_fraction_downtime defines the fraction of stake to slash for downtime
	SlashFractionDowntime github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=slash_fraction_downtime,json=slashFractionDowntime,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_downtime"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a1ce927fa70879, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnableOracle() bool {
	if m != nil {
		return m.EnableOracle
	}
	return false
}

func (m *Params) GetSubmitWindow() uint64 {
	if m != nil {
		return m.SubmitWindow
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "guru.oracle.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "guru.oracle.v1.Params")
}

func init() { proto.RegisterFile("guru/oracle/v1/genesis.proto", fileDescriptor_c4a1ce927fa70879) }

var fileDescriptor_c4a1ce927fa70879 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xe3, 0x24, 0x5f, 0xf4, 0x31, 0x0d, 0x88, 0x0e, 0x04, 0xac, 0x82, 0x5c, 0xab, 0x48,
	0xc8, 0x02, 0xd5, 0x56, 0x0b, 0x12, 0x6b, 0x42, 0x44, 0x97, 0x44, 0x2e, 0x7f, 0x24, 0x36, 0xd6,
	0xd8, 0xbe, 0x71, 0x47, 0xd8, 0x33, 0x66, 0x66, 0xdc, 0x94, 0xb7, 0xe0, 0x05, 0x78, 0x9f, 0x2e,
	0xbb, 0x04, 0x16, 0x15, 0x4a, 0x5e, 0x04, 0x79, 0x66, 0x52, 0x81, 0x61, 0xc5, 0xca, 0xd6, 0x39,
	0x67, 0x7e, 0xe7, 0xea, 0xea, 0xa2, 0xfb, 0x45, 0x23, 0x9a, 0x88, 0x0b, 0x92, 0x95, 0x10, 0x9d,
	0x1e, 0x44, 0x05, 0x30, 0x90, 0x54, 0x86, 0xb5, 0xe0, 0x8a, 0xe3, 0x1b, 0xad, 0x1b, 0x1a, 0x37,
	0x3c, 0x3d, 0xd8, 0xb9, 0x5d, 0xf0, 0x82, 0x6b, 0x2b, 0x6a, 0xff, 0x4c, 0x6a, 0xe7, 0x5e, 0x87,
	0x61, 0xf3, 0xda, 0xdc, 0xfb, 0xd6, 0x47, 0xe3, 0x23, 0x03, 0x3d, 0x56, 0x44, 0x01, 0x7e, 0x8a,
	0x46, 0x35, 0x11, 0xa4, 0x92, 0xae, 0xe3, 0x3b, 0xc1, 0xd6, 0xe1, 0x9d, 0xf0, 0xf7, 0x92, 0x70,
	0xae, 0xdd, 0xe9, 0xf0, 0xfc, 0x72, 0xb7, 0x17, 0xdb, 0x2c, 0x7e, 0x86, 0x5c, 0x93, 0x48, 0x04,
	0x7c, 0x6c, 0x40, 0xaa, 0x24, 0xe7, 0x59, 0x92, 0xf1, 0x86, 0x29, 0xb7, 0xef, 0x3b, 0xc1, 0x30,
	0x9e, 0x18, 0x3f, 0x36, 0xf6, 0x8c, 0x67, 0x2f, 0x5a, 0x13, 0xbf, 0x45, 0xb7, 0xfe, 0x7c, 0x28,
	0xdd, 0x81, 0x3f, 0x08, 0xb6, 0x0e, 0xfd, 0x6e, 0xf7, 0xab, 0x0e, 0xc3, 0x4e, 0xb1, 0xdd, 0x65,
	0x4b, 0xfc, 0x06, 0xe1, 0x5a, 0x40, 0x0e, 0x0b, 0xca, 0x20, 0x4f, 0x8c, 0x2f, 0xdd, 0xe1, 0xdf,
	0xb1, 0xf3, 0xab, 0xa4, 0x29, 0xd8, 0x60, 0xeb, 0x8e, 0x2e, 0xf1, 0x63, 0xb4, 0x5d, 0xf1, 0x1c,
	0x04, 0x51, 0x5c, 0x24, 0x24, 0xcf, 0x05, 0x48, 0xe9, 0xfe, 0xe7, 0x3b, 0xc1, 0xb5, 0xf8, 0xe6,
	0x95, 0xf1, 0xdc, 0xe8, 0x7b, 0x5f, 0xfa, 0x68, 0x64, 0xb6, 0x85, 0x1f, 0xa0, 0xeb, 0xc0, 0x48,
	0x5a, 0x82, 0x1d, 0x45, 0x2f, 0xf7, 0xff, 0x78, 0x6c, 0x44, 0x43, 0x6f, 0x43, 0xb2, 0x49, 0x2b,
	0xaa, 0x92, 0x25, 0x65, 0x39, 0x5f, 0xda, 0xcd, 0x8d, 0x8d, 0xf8, 0x4e, 0x6b, 0x98, 0xa0, 0x49,
	0x45, 0x59, 0x62, 0x83, 0x35, 0x88, 0x4d, 0x78, 0xe0, 0x3b, 0xc1, 0x78, 0x1a, 0xb6, 0x93, 0x7f,
	0xbf, 0xdc, 0x7d, 0x58, 0x50, 0x75, 0xd2, 0xa4, 0x61, 0xc6, 0xab, 0x28, 0xe3, 0xb2, 0xe2, 0xd2,
	0x7e, 0xf6, 0x65, 0xfe, 0x21, 0x52, 0x9f, 0x6a, 0x90, 0xe1, 0x0c, 0xb2, 0x18, 0x57, 0x94, 0x1d,
	0x6b, 0xd6, 0x1c, 0x84, 0xad, 0x58, 0xa0, 0xbb, 0xb2, 0x24, 0xf2, 0x24, 0x59, 0x08, 0x92, 0x29,
	0xca, 0x59, 0x92, 0xf3, 0x25, 0x53, 0xb4, 0x02, 0x77, 0xf8, 0x4f, 0x25, 0x13, 0x8d, 0x7b, 0x69,
	0x69, 0x33, 0x0b, 0x9b, 0xce, 0xce, 0x57, 0x9e, 0x73, 0xb1, 0xf2, 0x9c, 0x1f, 0x2b, 0xcf, 0xf9,
	0xbc, 0xf6, 0x7a, 0x17, 0x6b, 0xaf, 0xf7, 0x75, 0xed, 0xf5, 0xde, 0x3f, 0xfa, 0x05, 0x7c, 0x34,
	0x7f, 0x7d, 0xb6, 0x5f, 0x94, 0x3c, 0x25, 0x65, 0xa4, 0x2f, 0xf9, 0x6c, 0x73, 0xcb, 0xba, 0x20,
	0x1d, 0xe9, 0x43, 0x7e, 0xf2, 0x33, 0x00, 0x00, 0xff, 0xff, 0x82, 0xf0, 0xf5, 0x7f, 0x2b, 0x03,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PredefinedOracles) > 0 {
		for iNdEx := len(m.PredefinedOracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PredefinedOracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OracleRequestDocs) > 0 {
		for iNdEx := len(m.OracleRequestDocs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleRequestDocs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OracleRequestDocCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OracleRequestDocCount))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashFractionDowntime.Size()
		i -= size
		if _, err := m.SlashFractionDowntime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MinSubmitPerWindow.Size()
		i -= size
		if _, err := m.MinSubmitPerWindow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.SubmitWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SubmitWindow))
		i--
		dAtA[i] = 0x10
	}
	if m.EnableOracle {
		i--
		if m.EnableOracle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.OracleRequestDocCount != 0 {
		n += 1 + sovGenesis(uint64(m.OracleRequestDocCount))
	}
	if len(m.OracleRequestDocs) > 0 {
		for _, e := range m.OracleRequestDocs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PredefinedOracles) > 0 {
		for _, e := range m.PredefinedOracles {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableOracle {
		n += 2
	}
	if m.SubmitWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SubmitWindow))
	}
	l = m.MinSubmitPerWindow.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionDowntime.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequestDocCount", wireType)
			}
			m.OracleRequestDocCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleRequestDocCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequestDocs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleRequestDocs = append(m.OracleRequestDocs, OracleRequestDoc{})
			if err := m.OracleRequestDocs[len(m.OracleRequestDocs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredefinedOracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredefinedOracles = append(m.PredefinedOracles, PredefinedOracle{})
			if err := m.PredefinedOracles[len(m.PredefinedOracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableOracle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableOracle = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitWindow", wireType)
			}
			m.SubmitWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubmitPerWindow", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSubmitPerWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDowntime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDowntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
