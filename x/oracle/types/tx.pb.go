// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/oracle/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterOracleRequestDoc represents a message to register a new oracle request document
type MsgRegisterOracleRequestDoc struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// The oracle request document to be registered
	RequestDoc OracleRequestDoc `protobuf:"bytes,2,opt,name=request_doc,json=requestDoc,proto3" json:"request_doc"`
}

func (m *MsgRegisterOracleRequestDoc) Reset()         { *m = MsgRegisterOracleRequestDoc{} }
func (m *MsgRegisterOracleRequestDoc) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracleRequestDoc) ProtoMessage()    {}
func (*MsgRegisterOracleRequestDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{0}
}
func (m *MsgRegisterOracleRequestDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracleRequestDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracleRequestDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracleRequestDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracleRequestDoc.Merge(m, src)
}
func (m *MsgRegisterOracleRequestDoc) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracleRequestDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracleRequestDoc.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracleRequestDoc proto.InternalMessageInfo

// MsgRegisterOracleRequestDocResponse defines the Msg/RegisterOracleRequestDoc response type
type MsgRegisterOracleRequestDocResponse struct {
	// ID of the registered oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgRegisterOracleRequestDocResponse) Reset()         { *m = MsgRegisterOracleRequestDocResponse{} }
func (m *MsgRegisterOracleRequestDocResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracleRequestDocResponse) ProtoMessage()    {}
func (*MsgRegisterOracleRequestDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{1}
}
func (m *MsgRegisterOracleRequestDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracleRequestDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracleRequestDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracleRequestDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracleRequestDocResponse.Merge(m, src)
}
func (m *MsgRegisterOracleRequestDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracleRequestDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracleRequestDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracleRequestDocResponse proto.InternalMessageInfo

func (m *MsgRegisterOracleRequestDocResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// MsgUpdateOracleRequestDoc represents a message to update an existing oracle request document
type MsgUpdateOracleRequestDoc struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// The updated oracle request document
	RequestDoc OracleRequestDoc `protobuf:"bytes,2,opt,name=request_doc,json=requestDoc,proto3" json:"request_doc"`
	// Reason for the update
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgUpdateOracleRequestDoc) Reset()         { *m = MsgUpdateOracleRequestDoc{} }
func (m *MsgUpdateOracleRequestDoc) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleRequestDoc) ProtoMessage()    {}
func (*MsgUpdateOracleRequestDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{2}
}
func (m *MsgUpdateOracleRequestDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleRequestDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleRequestDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleRequestDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleRequestDoc.Merge(m, src)
}
func (m *MsgUpdateOracleRequestDoc) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleRequestDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleRequestDoc.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleRequestDoc proto.InternalMessageInfo

// MsgUpdateOracleRequestDocResponse defines the Msg/UpdateOracleRequestDoc response type
type MsgUpdateOracleRequestDocResponse struct {
	// ID of the updated oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgUpdateOracleRequestDocResponse) Reset()         { *m = MsgUpdateOracleRequestDocResponse{} }
func (m *MsgUpdateOracleRequestDocResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleRequestDocResponse) ProtoMessage()    {}
func (*MsgUpdateOracleRequestDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{3}
}
func (m *MsgUpdateOracleRequestDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleRequestDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleRequestDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleRequestDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleRequestDocResponse.Merge(m, src)
}
func (m *MsgUpdateOracleRequestDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleRequestDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleRequestDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleRequestDocResponse proto.InternalMessageInfo

func (m *MsgUpdateOracleRequestDocResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// MsgSubmitOracleData represents a message to submit oracle data
type MsgSubmitOracleData struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// The oracle data set to be submitted, containing the raw data and metadata
	DataSet *SubmitDataSet `protobuf:"bytes,2,opt,name=data_set,json=dataSet,proto3" json:"data_set,omitempty"`
}

func (m *MsgSubmitOracleData) Reset()         { *m = MsgSubmitOracleData{} }
func (m *MsgSubmitOracleData) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitOracleData) ProtoMessage()    {}
func (*MsgSubmitOracleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{4}
}
func (m *MsgSubmitOracleData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitOracleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitOracleData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitOracleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitOracleData.Merge(m, src)
}
func (m *MsgSubmitOracleData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitOracleData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitOracleData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitOracleData proto.InternalMessageInfo

// MsgSubmitOracleDataResponse defines the Msg/SubmitOracleData response type
type MsgSubmitOracleDataResponse struct {
}

func (m *MsgSubmitOracleDataResponse) Reset()         { *m = MsgSubmitOracleDataResponse{} }
func (m *MsgSubmitOracleDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitOracleDataResponse) ProtoMessage()    {}
func (*MsgSubmitOracleDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{5}
}
func (m *MsgSubmitOracleDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitOracleDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitOracleDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitOracleDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitOracleDataResponse.Merge(m, src)
}
func (m *MsgSubmitOracleDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitOracleDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitOracleDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitOracleDataResponse proto.InternalMessageInfo

// MsgUpdateModeratorAddress represents a message to update the moderator address
type MsgUpdateModeratorAddress struct {
	FromAddress      string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ModeratorAddress string `protobuf:"bytes,2,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *MsgUpdateModeratorAddress) Reset()         { *m = MsgUpdateModeratorAddress{} }
func (m *MsgUpdateModeratorAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateModeratorAddress) ProtoMessage()    {}
func (*MsgUpdateModeratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{6}
}
func (m *MsgUpdateModeratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateModeratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateModeratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateModeratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateModeratorAddress.Merge(m, src)
}
func (m *MsgUpdateModeratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateModeratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateModeratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateModeratorAddress proto.InternalMessageInfo

// MsgUpdateModeratorAddressResponse defines the Msg/UpdateModeratorAddress response type
type MsgUpdateModeratorAddressResponse struct {
}

func (m *MsgUpdateModeratorAddressResponse) Reset()         { *m = MsgUpdateModeratorAddressResponse{} }
func (m *MsgUpdateModeratorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateModeratorAddressResponse) ProtoMessage()    {}
func (*MsgUpdateModeratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_febdd1f478235f42, []int{7}
}
func (m *MsgUpdateModeratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateModeratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateModeratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateModeratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateModeratorAddressResponse.Merge(m, src)
}
func (m *MsgUpdateModeratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateModeratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateModeratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateModeratorAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterOracleRequestDoc)(nil), "guru.oracle.v1.MsgRegisterOracleRequestDoc")
	proto.RegisterType((*MsgRegisterOracleRequestDocResponse)(nil), "guru.oracle.v1.MsgRegisterOracleRequestDocResponse")
	proto.RegisterType((*MsgUpdateOracleRequestDoc)(nil), "guru.oracle.v1.MsgUpdateOracleRequestDoc")
	proto.RegisterType((*MsgUpdateOracleRequestDocResponse)(nil), "guru.oracle.v1.MsgUpdateOracleRequestDocResponse")
	proto.RegisterType((*MsgSubmitOracleData)(nil), "guru.oracle.v1.MsgSubmitOracleData")
	proto.RegisterType((*MsgSubmitOracleDataResponse)(nil), "guru.oracle.v1.MsgSubmitOracleDataResponse")
	proto.RegisterType((*MsgUpdateModeratorAddress)(nil), "guru.oracle.v1.MsgUpdateModeratorAddress")
	proto.RegisterType((*MsgUpdateModeratorAddressResponse)(nil), "guru.oracle.v1.MsgUpdateModeratorAddressResponse")
}

func init() { proto.RegisterFile("guru/oracle/v1/tx.proto", fileDescriptor_febdd1f478235f42) }

var fileDescriptor_febdd1f478235f42 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xb5, 0x9b, 0xaa, 0xd0, 0x0b, 0x42, 0xc5, 0x54, 0x6d, 0x92, 0x2a, 0x4e, 0x48, 0x96, 0xd2,
	0xaa, 0xb6, 0xd2, 0x2e, 0x08, 0x26, 0xa2, 0xa0, 0x8a, 0x21, 0x02, 0x39, 0xb0, 0xb0, 0x58, 0x67,
	0xdf, 0x71, 0x58, 0x8a, 0x73, 0xe1, 0xee, 0x1c, 0x05, 0x89, 0x89, 0x89, 0x91, 0x9f, 0xd0, 0x8d,
	0x95, 0x81, 0x89, 0x81, 0xb9, 0x63, 0x85, 0x18, 0x60, 0x41, 0x28, 0x19, 0xe0, 0x67, 0x20, 0xfb,
	0xec, 0xa8, 0x75, 0x62, 0x13, 0xd4, 0x85, 0xcd, 0xf7, 0x7d, 0x2f, 0xef, 0x7d, 0xef, 0xdd, 0x5d,
	0x0e, 0x6c, 0x93, 0x80, 0x05, 0x26, 0x65, 0xd0, 0xed, 0x63, 0x73, 0xd4, 0x32, 0xc5, 0xd8, 0x18,
	0x32, 0x2a, 0xa8, 0x76, 0x3d, 0x6c, 0x18, 0xb2, 0x61, 0x8c, 0x5a, 0x95, 0x6d, 0x97, 0x72, 0x9f,
	0x72, 0xd3, 0xe7, 0x24, 0xc4, 0xf9, 0x9c, 0x48, 0x60, 0xa5, 0x2c, 0x1b, 0x76, 0xb4, 0x32, 0xe5,
	0x22, 0x6e, 0x6d, 0x12, 0x4a, 0xa8, 0xac, 0x87, 0x5f, 0x71, 0x75, 0x27, 0x25, 0x19, 0x6b, 0xc8,
	0xa6, 0x1e, 0xcb, 0x38, 0x90, 0x87, 0x4d, 0x07, 0x0b, 0xd8, 0x32, 0x5d, 0xea, 0x0d, 0x64, 0xbf,
	0xf1, 0x59, 0x05, 0x3b, 0x5d, 0x4e, 0x2c, 0x4c, 0x3c, 0x2e, 0x30, 0x7b, 0x14, 0xfd, 0xd6, 0xc2,
	0x2f, 0x03, 0xcc, 0x45, 0x87, 0xba, 0xda, 0x3d, 0x70, 0xed, 0x39, 0xa3, 0xbe, 0x0d, 0x11, 0x62,
	0x98, 0xf3, 0x92, 0x5a, 0x57, 0x77, 0xd7, 0xdb, 0xa5, 0x2f, 0x1f, 0x0f, 0x36, 0xe3, 0xd1, 0xee,
	0xcb, 0x4e, 0x4f, 0x30, 0x6f, 0x40, 0xac, 0x62, 0x88, 0x8e, 0x4b, 0xda, 0x31, 0x28, 0x32, 0x49,
	0x65, 0x23, 0xea, 0x96, 0x56, 0xea, 0xea, 0x6e, 0xf1, 0xb0, 0x6e, 0x5c, 0x4c, 0xc2, 0x48, 0x6b,
	0xb6, 0x57, 0x4f, 0x7f, 0xd4, 0x14, 0x0b, 0xb0, 0x59, 0xe5, 0x6e, 0xf9, 0xed, 0x49, 0x4d, 0xf9,
	0x7d, 0x52, 0x53, 0xde, 0xfc, 0xfa, 0xb0, 0x77, 0x61, 0xa0, 0x46, 0x07, 0x34, 0x73, 0xe6, 0xb7,
	0x30, 0x1f, 0xd2, 0x01, 0xc7, 0x5a, 0x15, 0x24, 0x7c, 0xb6, 0x87, 0x22, 0x17, 0xab, 0xd6, 0x7a,
	0x5c, 0x79, 0x88, 0x1a, 0x5f, 0x55, 0x50, 0xee, 0x72, 0xf2, 0x74, 0x88, 0xa0, 0xc0, 0xff, 0x67,
	0x08, 0xda, 0x16, 0x58, 0x63, 0x18, 0x72, 0x3a, 0x28, 0x15, 0x42, 0x7d, 0x2b, 0x5e, 0xe5, 0x85,
	0xd3, 0x06, 0xb7, 0x32, 0x5d, 0x2d, 0x1b, 0xcd, 0x7b, 0x15, 0xdc, 0xec, 0x72, 0xd2, 0x0b, 0x1c,
	0xdf, 0x13, 0x92, 0xa4, 0x03, 0x05, 0xbc, 0x5c, 0x28, 0x77, 0xc0, 0x55, 0x04, 0x05, 0xb4, 0x39,
	0x16, 0x71, 0x22, 0xd5, 0x74, 0x22, 0x52, 0x30, 0x94, 0xea, 0x61, 0x61, 0x5d, 0x41, 0xf2, 0x23,
	0xcf, 0x6d, 0x35, 0x3a, 0xca, 0xe9, 0x41, 0x13, 0x9f, 0x8d, 0x4f, 0xe7, 0xf7, 0xb8, 0x4b, 0x11,
	0x66, 0x50, 0x50, 0x96, 0x4c, 0x74, 0x29, 0x3b, 0x0f, 0xc0, 0x0d, 0x3f, 0x21, 0x9c, 0x31, 0xac,
	0xfc, 0x85, 0x61, 0xc3, 0x4f, 0xcd, 0x90, 0xe7, 0xad, 0x79, 0x6e, 0x27, 0xd3, 0xb3, 0x27, 0x0e,
	0x0f, 0xbf, 0x17, 0x40, 0xa1, 0xcb, 0x89, 0xf6, 0x1a, 0x94, 0x32, 0x2f, 0xf4, 0x7e, 0x3a, 0xe7,
	0x9c, 0xdb, 0x53, 0x39, 0xfa, 0x07, 0xf0, 0xec, 0x3c, 0x8d, 0xc0, 0x56, 0xc6, 0x3d, 0xba, 0xbd,
	0x80, 0x6e, 0x31, 0xb4, 0xd2, 0x5a, 0x1a, 0x3a, 0xd3, 0x45, 0x60, 0x63, 0xee, 0x90, 0x36, 0x17,
	0xd0, 0xa4, 0x41, 0x95, 0xfd, 0x25, 0x40, 0xf3, 0xee, 0xe6, 0x4e, 0x50, 0xb6, 0xbb, 0x34, 0x34,
	0xc7, 0x5d, 0xd6, 0xde, 0xb6, 0x3b, 0xa7, 0x13, 0x5d, 0x3d, 0x9b, 0xe8, 0xea, 0xcf, 0x89, 0xae,
	0xbe, 0x9b, 0xea, 0xca, 0xd9, 0x54, 0x57, 0xbe, 0x4d, 0x75, 0xe5, 0xd9, 0x1e, 0xf1, 0xc4, 0x8b,
	0xc0, 0x31, 0x5c, 0xea, 0x9b, 0xc7, 0x8f, 0x9f, 0x8c, 0x0f, 0x48, 0x9f, 0x3a, 0xb0, 0x6f, 0x46,
	0xcf, 0xc2, 0x38, 0x79, 0x18, 0xc4, 0xab, 0x21, 0xe6, 0xce, 0x5a, 0xf4, 0xaf, 0x7f, 0xf4, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xb6, 0x69, 0x0e, 0xa8, 0xa7, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterOracleRequestDoc defines a method for registering a new oracle request document
	RegisterOracleRequestDoc(ctx context.Context, in *MsgRegisterOracleRequestDoc, opts ...grpc.CallOption) (*MsgRegisterOracleRequestDocResponse, error)
	// UpdateOracleRequestDoc defines a method for updating an existing oracle request document
	UpdateOracleRequestDoc(ctx context.Context, in *MsgUpdateOracleRequestDoc, opts ...grpc.CallOption) (*MsgUpdateOracleRequestDocResponse, error)
	// SubmitOracleData defines a method for submitting oracle data
	SubmitOracleData(ctx context.Context, in *MsgSubmitOracleData, opts ...grpc.CallOption) (*MsgSubmitOracleDataResponse, error)
	// UpdateModeratorAddress defines a method for updating the moderator address
	UpdateModeratorAddress(ctx context.Context, in *MsgUpdateModeratorAddress, opts ...grpc.CallOption) (*MsgUpdateModeratorAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOracleRequestDoc(ctx context.Context, in *MsgRegisterOracleRequestDoc, opts ...grpc.CallOption) (*MsgRegisterOracleRequestDocResponse, error) {
	out := new(MsgRegisterOracleRequestDocResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Msg/RegisterOracleRequestDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOracleRequestDoc(ctx context.Context, in *MsgUpdateOracleRequestDoc, opts ...grpc.CallOption) (*MsgUpdateOracleRequestDocResponse, error) {
	out := new(MsgUpdateOracleRequestDocResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Msg/UpdateOracleRequestDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitOracleData(ctx context.Context, in *MsgSubmitOracleData, opts ...grpc.CallOption) (*MsgSubmitOracleDataResponse, error) {
	out := new(MsgSubmitOracleDataResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Msg/SubmitOracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateModeratorAddress(ctx context.Context, in *MsgUpdateModeratorAddress, opts ...grpc.CallOption) (*MsgUpdateModeratorAddressResponse, error) {
	out := new(MsgUpdateModeratorAddressResponse)
	err := c.cc.Invoke(ctx, "/guru.oracle.v1.Msg/UpdateModeratorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterOracleRequestDoc defines a method for registering a new oracle request document
	RegisterOracleRequestDoc(context.Context, *MsgRegisterOracleRequestDoc) (*MsgRegisterOracleRequestDocResponse, error)
	// UpdateOracleRequestDoc defines a method for updating an existing oracle request document
	UpdateOracleRequestDoc(context.Context, *MsgUpdateOracleRequestDoc) (*MsgUpdateOracleRequestDocResponse, error)
	// SubmitOracleData defines a method for submitting oracle data
	SubmitOracleData(context.Context, *MsgSubmitOracleData) (*MsgSubmitOracleDataResponse, error)
	// UpdateModeratorAddress defines a method for updating the moderator address
	UpdateModeratorAddress(context.Context, *MsgUpdateModeratorAddress) (*MsgUpdateModeratorAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOracleRequestDoc(ctx context.Context, req *MsgRegisterOracleRequestDoc) (*MsgRegisterOracleRequestDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOracleRequestDoc not implemented")
}
func (*UnimplementedMsgServer) UpdateOracleRequestDoc(ctx context.Context, req *MsgUpdateOracleRequestDoc) (*MsgUpdateOracleRequestDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOracleRequestDoc not implemented")
}
func (*UnimplementedMsgServer) SubmitOracleData(ctx context.Context, req *MsgSubmitOracleData) (*MsgSubmitOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOracleData not implemented")
}
func (*UnimplementedMsgServer) UpdateModeratorAddress(ctx context.Context, req *MsgUpdateModeratorAddress) (*MsgUpdateModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModeratorAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOracleRequestDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOracleRequestDoc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOracleRequestDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Msg/RegisterOracleRequestDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOracleRequestDoc(ctx, req.(*MsgRegisterOracleRequestDoc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOracleRequestDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOracleRequestDoc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOracleRequestDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Msg/UpdateOracleRequestDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOracleRequestDoc(ctx, req.(*MsgUpdateOracleRequestDoc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitOracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitOracleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitOracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Msg/SubmitOracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitOracleData(ctx, req.(*MsgSubmitOracleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateModeratorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.oracle.v1.Msg/UpdateModeratorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateModeratorAddress(ctx, req.(*MsgUpdateModeratorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.oracle.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOracleRequestDoc",
			Handler:    _Msg_RegisterOracleRequestDoc_Handler,
		},
		{
			MethodName: "UpdateOracleRequestDoc",
			Handler:    _Msg_UpdateOracleRequestDoc_Handler,
		},
		{
			MethodName: "SubmitOracleData",
			Handler:    _Msg_SubmitOracleData_Handler,
		},
		{
			MethodName: "UpdateModeratorAddress",
			Handler:    _Msg_UpdateModeratorAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/oracle/v1/tx.proto",
}

func (m *MsgRegisterOracleRequestDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracleRequestDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracleRequestDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RequestDoc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOracleRequestDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracleRequestDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracleRequestDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleRequestDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleRequestDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleRequestDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.RequestDoc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleRequestDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleRequestDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleRequestDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitOracleData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitOracleData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitOracleData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSet != nil {
		{
			size, err := m.DataSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitOracleDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitOracleDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitOracleDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateModeratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateModeratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateModeratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateModeratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateModeratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateModeratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterOracleRequestDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RequestDoc.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterOracleRequestDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgUpdateOracleRequestDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RequestDoc.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateOracleRequestDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgSubmitOracleData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DataSet != nil {
		l = m.DataSet.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitOracleDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateModeratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateModeratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterOracleRequestDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracleRequestDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracleRequestDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestDoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOracleRequestDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracleRequestDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracleRequestDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleRequestDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleRequestDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleRequestDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestDoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleRequestDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleRequestDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleRequestDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitOracleData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitOracleData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitOracleData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSet == nil {
				m.DataSet = &SubmitDataSet{}
			}
			if err := m.DataSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitOracleDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitOracleDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitOracleDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateModeratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateModeratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateModeratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateModeratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateModeratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateModeratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
